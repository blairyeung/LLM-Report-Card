{"question": "Context: You are given a list of integers and you need to find the maximum product of three numbers in the list. For example, given the list [1,2,3,4], the maximum product is 24 (i.e., 2*3*4).\nQuestion: Write a Python function to find the maximum product of three numbers in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and you need to find the maximum product of three numbers in the list. For example, given the list [1,2,3,4], the maximum product is 24 (i.e., 2*3*4).", "query": "Write a Python function to find the maximum product of three numbers in the given list."}
{"question": "Context: You are developing a web application that requires user authentication. One of the tasks is to implement a function that checks if a given password is strong. A strong password is defined as one that has at least 8 characters, includes both uppercase and lowercase letters, contains at least one digit, and has at least one special character.\nQuestion: Write a function to check if a given password is strong based on the specified criteria. Ensure the function is efficient and handles edge cases.", "system_prompt": "You are a Python developer tasked with implementing a function to check for strong passwords.", "passage": "You are developing a web application that requires user authentication. One of the tasks is to implement a function that checks if a given password is strong. A strong password is defined as one that has at least 8 characters, includes both uppercase and lowercase letters, contains at least one digit, and has at least one special character.", "query": "Write a function to check if a given password is strong based on the specified criteria. Ensure the function is efficient and handles edge cases."}
{"question": "Context: You are given a list of integers and you need to find the longest consecutive sequence of integers. The algorithm should run in O(n) time. For example, given the list [100, 4, 200, 1, 3, 2], the longest consecutive sequence is [1, 2, 3, 4].\nQuestion: Write a Python function to find the longest consecutive sequence of integers in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and you need to find the longest consecutive sequence of integers. The algorithm should run in O(n) time. For example, given the list [100, 4, 200, 1, 3, 2], the longest consecutive sequence is [1, 2, 3, 4].", "query": "Write a Python function to find the longest consecutive sequence of integers in the given list."}
{"question": "Context: You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings after it rains. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.\nQuestion: Write a Python function to find the maximum area of water trapped between buildings, ensuring it is optimized for time and space complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings after it rains. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.", "query": "Write a Python function to find the maximum area of water trapped between buildings, ensuring it is optimized for time and space complexity."}
{"question": "Context: You are working on a LeetCode problem where you need to implement a function to find the minimum number of coins needed to make up a given amount. The problem statement is as follows: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You have written the following code:\n\n```python\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for x in range(coin, amount + 1):\n                dp[x] = min(dp[x], dp[x - coin] + 1)\n        return dp[amount] if dp[amount] != float('inf') else -1\n```\nHowever, this solution can be optimized for better performance.\nQuestion: Review the provided code and optimize it for better performance.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are working on a LeetCode problem where you need to implement a function to find the minimum number of coins needed to make up a given amount. The problem statement is as follows: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You have written the following code:\n\n```python\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for x in range(coin, amount + 1):\n                dp[x] = min(dp[x], dp[x - coin] + 1)\n        return dp[amount] if dp[amount] != float('inf') else -1\n```\nHowever, this solution can be optimized for better performance.", "query": "Review the provided code and optimize it for better performance."}
{"question": "Context: You are given an array of integers, and you need to find the maximum product of three numbers in the array. The solution should be optimized for performance and handle both positive and negative numbers.\nQuestion: Write and optimize a function in Python to find the maximum product of three numbers in an array, ensuring it runs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the maximum product of three numbers in the array. The solution should be optimized for performance and handle both positive and negative numbers.", "query": "Write and optimize a function in Python to find the maximum product of three numbers in an array, ensuring it runs efficiently."}
{"question": "Context: You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be efficient and handle large inputs gracefully.\nQuestion: Implement and optimize a function in Python to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be efficient and handle large inputs gracefully.", "query": "Implement and optimize a function in Python to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently."}
{"question": "Context: You are given an array of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.\nQuestion: Write and optimize a function in Python to find the maximum area of water trapped between buildings, ensuring it runs in O(n) time complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.", "query": "Write and optimize a function in Python to find the maximum area of water trapped between buildings, ensuring it runs in O(n) time complexity."}
{"question": "Context: You are practicing graph-related problems on LeetCode. One of the problems requires you to find the shortest path in a weighted graph. You have written a solution, but it seems to be incorrect for some test cases.\nQuestion: Review the following code for finding the shortest path in a weighted graph and identify any errors: [insert code here].", "system_prompt": "You are a graph theory specialist.", "passage": "You are practicing graph-related problems on LeetCode. One of the problems requires you to find the shortest path in a weighted graph. You have written a solution, but it seems to be incorrect for some test cases.", "query": "Review the following code for finding the shortest path in a weighted graph and identify any errors: [insert code here]."}
{"question": "Context: You are given a list of intervals where each interval is represented as a pair of start and end times. The task is to merge all overlapping intervals and return the list of merged intervals. For example, given the list [[1,3],[2,6],[8,10],[15,18]], the output should be [[1,6],[8,10],[15,18]].\nQuestion: Write a Python function to merge all overlapping intervals in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of intervals where each interval is represented as a pair of start and end times. The task is to merge all overlapping intervals and return the list of merged intervals. For example, given the list [[1,3],[2,6],[8,10],[15,18]], the output should be [[1,6],[8,10],[15,18]].", "query": "Write a Python function to merge all overlapping intervals in the given list."}
{"question": "Context: You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The function should be optimized to run in O(n) time.\nQuestion: Implement and optimize a function to find the longest consecutive sequence of integers, ensuring it runs in O(n) time.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The function should be optimized to run in O(n) time.", "query": "Implement and optimize a function to find the longest consecutive sequence of integers, ensuring it runs in O(n) time."}
{"question": "Context: You are given an array of integers. Your task is to find the maximum product of three numbers in the array. The function should be efficient and handle large arrays.\nQuestion: Write a Python function to find the maximum product of three numbers in an array, ensuring it is efficient and handles large arrays.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers. Your task is to find the maximum product of three numbers in the array. The function should be efficient and handle large arrays.", "query": "Write a Python function to find the maximum product of three numbers in an array, ensuring it is efficient and handles large arrays."}
{"question": "Context: You are solving a LeetCode problem that requires you to find the median of two sorted arrays. You have come up with a solution, but it seems to be running slower than expected.\nQuestion: Evaluate the performance of the following code for finding the median of two sorted arrays and suggest ways to improve its efficiency: [insert code here].", "system_prompt": "You are a competitive programming coach.", "passage": "You are solving a LeetCode problem that requires you to find the median of two sorted arrays. You have come up with a solution, but it seems to be running slower than expected.", "query": "Evaluate the performance of the following code for finding the median of two sorted arrays and suggest ways to improve its efficiency: [insert code here]."}
{"question": "Context: During a code review, you come across a function that is supposed to find the longest common subsequence (LCS) between two strings. The current implementation uses a recursive approach, which leads to a high time complexity and stack overflow errors for long strings.\nQuestion: Rewrite the function to find the longest common subsequence using dynamic programming to handle long strings efficiently.", "system_prompt": "You are a senior developer reviewing code for efficiency and correctness.", "passage": "During a code review, you come across a function that is supposed to find the longest common subsequence (LCS) between two strings. The current implementation uses a recursive approach, which leads to a high time complexity and stack overflow errors for long strings.", "query": "Rewrite the function to find the longest common subsequence using dynamic programming to handle long strings efficiently."}
{"question": "Context: You are working on a LeetCode problem where you need to implement a function to find the number of ways to decode a string. The problem statement is as follows: A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. Given a non-empty string containing only digits, determine the total number of ways to decode it. You have written the following code:\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if not s or s[0] == '0':\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0], dp[1] = 1, 1\n        for i in range(2, n + 1):\n            if s[i-1] != '0':\n                dp[i] += dp[i-1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i-2]\n        return dp[n]\n```\nHowever, this solution can be optimized for space complexity.\nQuestion: Review the provided code and optimize it to reduce space complexity.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are working on a LeetCode problem where you need to implement a function to find the number of ways to decode a string. The problem statement is as follows: A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. Given a non-empty string containing only digits, determine the total number of ways to decode it. You have written the following code:\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if not s or s[0] == '0':\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0], dp[1] = 1, 1\n        for i in range(2, n + 1):\n            if s[i-1] != '0':\n                dp[i] += dp[i-1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i-2]\n        return dp[n]\n```\nHowever, this solution can be optimized for space complexity.", "query": "Review the provided code and optimize it to reduce space complexity."}
{"question": "Context: You are given a list of integers and you need to find the first missing positive integer. The algorithm should run in O(n) time and use constant extra space. For example, given the list [3,4,-1,1], the first missing positive integer is 2.\nQuestion: Write a Python function to find the first missing positive integer in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and you need to find the first missing positive integer. The algorithm should run in O(n) time and use constant extra space. For example, given the list [3,4,-1,1], the first missing positive integer is 2.", "query": "Write a Python function to find the first missing positive integer in the given list."}
{"question": "Context: Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation is not efficient for large matrices and needs optimization.\nQuestion: Optimize the function to find the longest increasing path in a matrix for better performance with large matrices.", "system_prompt": "You are a software engineer optimizing pathfinding algorithms for a mapping application.", "passage": "Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation is not efficient for large matrices and needs optimization.", "query": "Optimize the function to find the longest increasing path in a matrix for better performance with large matrices."}
{"question": "Context: You are given an unsorted array of integers, and you need to find the first missing positive integer. The solution should be optimized to run in O(n) time complexity and use constant space.\nQuestion: Write and optimize a function in Python to find the first missing positive integer, ensuring it runs in O(n) time complexity and uses constant space.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers, and you need to find the first missing positive integer. The solution should be optimized to run in O(n) time complexity and use constant space.", "query": "Write and optimize a function in Python to find the first missing positive integer, ensuring it runs in O(n) time complexity and uses constant space."}
{"question": "Context: You are working on a project that involves analyzing stock prices. One of the tasks is to find the best time to buy and sell a stock to maximize profit. You have written some initial code, but you are not sure if it handles all edge cases and performs optimally.\nQuestion: Review and optimize the code for finding the best time to buy and sell a stock to ensure it handles all edge cases and performs optimally.", "system_prompt": "You are a Python developer tasked with optimizing code for finding the best time to buy and sell a stock.", "passage": "You are working on a project that involves analyzing stock prices. One of the tasks is to find the best time to buy and sell a stock to maximize profit. You have written some initial code, but you are not sure if it handles all edge cases and performs optimally.", "query": "Review and optimize the code for finding the best time to buy and sell a stock to ensure it handles all edge cases and performs optimally."}
{"question": "Context: You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The solution should avoid duplicate triplets and be optimized for performance.\nQuestion: Write and optimize a function in Python to find all unique triplets in an array that sum to a target, ensuring no duplicate triplets are included.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The solution should avoid duplicate triplets and be optimized for performance.", "query": "Write and optimize a function in Python to find all unique triplets in an array that sum to a target, ensuring no duplicate triplets are included."}
{"question": "Context: You are working on a project that involves processing text data. One of the tasks is to implement a function that finds the longest common prefix among a list of strings. The function should be efficient and handle edge cases such as an empty list or a list with only one string.\nQuestion: Write a function to find the longest common prefix among a list of strings. Ensure the function is efficient and handles edge cases.", "system_prompt": "You are a Python developer tasked with implementing a function to find the longest common prefix among a list of strings.", "passage": "You are working on a project that involves processing text data. One of the tasks is to implement a function that finds the longest common prefix among a list of strings. The function should be efficient and handle edge cases such as an empty list or a list with only one string.", "query": "Write a function to find the longest common prefix among a list of strings. Ensure the function is efficient and handles edge cases."}
{"question": "Context: You are solving a LeetCode problem that requires you to implement a LRU (Least Recently Used) cache. You have written a solution, but you are unsure if it meets the problem's requirements.\nQuestion: Evaluate the following code for implementing a LRU cache and ensure it meets the problem's requirements: [insert code here].", "system_prompt": "You are a software engineering instructor.", "passage": "You are solving a LeetCode problem that requires you to implement a LRU (Least Recently Used) cache. You have written a solution, but you are unsure if it meets the problem's requirements.", "query": "Evaluate the following code for implementing a LRU cache and ensure it meets the problem's requirements: [insert code here]."}
{"question": "Context: You are working on a LeetCode problem that involves finding the k-th largest element in an array. You have written a solution, but you are not sure if it is the most efficient approach.\nQuestion: Analyze the following code for finding the k-th largest element in an array and suggest any optimizations: [insert code here].", "system_prompt": "You are an algorithm optimization expert.", "passage": "You are working on a LeetCode problem that involves finding the k-th largest element in an array. You have written a solution, but you are not sure if it is the most efficient approach.", "query": "Analyze the following code for finding the k-th largest element in an array and suggest any optimizations: [insert code here]."}
{"question": "Context: You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The solution should be optimized for both time and space complexity.\nQuestion: Implement and optimize a function in Python to find the largest sum subarray, ensuring it runs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The solution should be optimized for both time and space complexity.", "query": "Implement and optimize a function in Python to find the largest sum subarray, ensuring it runs efficiently."}
{"question": "Context: You are working on a financial application that requires calculating the maximum profit from stock transactions. The current implementation only handles one transaction, but the requirement has changed to allow for at most two transactions. The code needs to be extended and optimized for this new requirement.\nQuestion: Extend and optimize the function to calculate the maximum profit from at most two stock transactions.", "system_prompt": "You are a software engineer enhancing a financial application.", "passage": "You are working on a financial application that requires calculating the maximum profit from stock transactions. The current implementation only handles one transaction, but the requirement has changed to allow for at most two transactions. The code needs to be extended and optimized for this new requirement.", "query": "Extend and optimize the function to calculate the maximum profit from at most two stock transactions."}
{"question": "Context: You are solving a LeetCode problem where you need to implement a function to find the maximum sum of a subarray with at most k distinct elements. The problem statement is as follows: Given an integer array nums and an integer k, return the maximum sum of a subarray that contains at most k distinct elements. You have written the following code:\n\n```python\nclass Solution:\n    def maxSumKDistinct(self, nums: List[int], k: int) -> int:\n        from collections import defaultdict\n        n = len(nums)\n        max_sum = 0\n        current_sum = 0\n        left = 0\n        count = defaultdict(int)\n        for right in range(n):\n            count[nums[right]] += 1\n            current_sum += nums[right]\n            while len(count) > k:\n                count[nums[left]] -= 1\n                if count[nums[left]] == 0:\n                    del count[nums[left]]\n                current_sum -= nums[left]\n                left += 1\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n```\nHowever, this solution can be optimized for better performance.\nQuestion: Review the provided code and optimize it for better performance.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are solving a LeetCode problem where you need to implement a function to find the maximum sum of a subarray with at most k distinct elements. The problem statement is as follows: Given an integer array nums and an integer k, return the maximum sum of a subarray that contains at most k distinct elements. You have written the following code:\n\n```python\nclass Solution:\n    def maxSumKDistinct(self, nums: List[int], k: int) -> int:\n        from collections import defaultdict\n        n = len(nums)\n        max_sum = 0\n        current_sum = 0\n        left = 0\n        count = defaultdict(int)\n        for right in range(n):\n            count[nums[right]] += 1\n            current_sum += nums[right]\n            while len(count) > k:\n                count[nums[left]] -= 1\n                if count[nums[left]] == 0:\n                    del count[nums[left]]\n                current_sum -= nums[left]\n                left += 1\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n```\nHowever, this solution can be optimized for better performance.", "query": "Review the provided code and optimize it for better performance."}
{"question": "Context: Your team is developing a financial application that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation is not efficient for large arrays, leading to performance issues.\nQuestion: Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance.", "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.", "passage": "Your team is developing a financial application that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation is not efficient for large arrays, leading to performance issues.", "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance."}
{"question": "Context: You are given a binary tree and need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.\nQuestion: Implement a Python function to check if a binary tree is a valid BST, ensuring it is efficient and handles edge cases.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a binary tree and need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.", "query": "Implement a Python function to check if a binary tree is a valid BST, ensuring it is efficient and handles edge cases."}
{"question": "Context: You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for large inputs.\nQuestion: Write and optimize a function to find the maximum area of water trapped between buildings, ensuring it performs well with large datasets.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for large inputs.", "query": "Write and optimize a function to find the maximum area of water trapped between buildings, ensuring it performs well with large datasets."}
{"question": "Context: You are working on a project that involves processing large datasets. One of the tasks requires you to find the top k frequent elements in a list of integers. The list can be very large, and performance is a key concern. You have written some initial code, but you are not sure if it is optimal.\nQuestion: Review and optimize the code for finding the top k frequent elements in a list to ensure it performs well with large datasets.", "system_prompt": "You are a Python developer tasked with optimizing code for finding the top k frequent elements in a list.", "passage": "You are working on a project that involves processing large datasets. One of the tasks requires you to find the top k frequent elements in a list of integers. The list can be very large, and performance is a key concern. You have written some initial code, but you are not sure if it is optimal.", "query": "Review and optimize the code for finding the top k frequent elements in a list to ensure it performs well with large datasets."}
{"question": "Context: You are preparing for a coding interview and have been practicing LeetCode problems. You recently encountered a problem where you need to find the longest substring without repeating characters. You have written some code, but it doesn't seem to work correctly for all test cases.\nQuestion: Review the following code for finding the longest substring without repeating characters and identify any errors or improvements: [insert code here].", "system_prompt": "You are a coding interview coach.", "passage": "You are preparing for a coding interview and have been practicing LeetCode problems. You recently encountered a problem where you need to find the longest substring without repeating characters. You have written some code, but it doesn't seem to work correctly for all test cases.", "query": "Review the following code for finding the longest substring without repeating characters and identify any errors or improvements: [insert code here]."}
{"question": "Context: You are given an array of integers, and you need to find the length of the longest increasing subsequence. The function should be optimized to handle large arrays efficiently.\nQuestion: Implement and optimize a function to find the length of the longest increasing subsequence, ensuring it performs well with large arrays.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the length of the longest increasing subsequence. The function should be optimized to handle large arrays efficiently.", "query": "Implement and optimize a function to find the length of the longest increasing subsequence, ensuring it performs well with large arrays."}
{"question": "Context: You are working on a project that involves decoding messages. Each message is encoded as a string of digits, and you need to find the number of ways to decode the string. The current implementation is not efficient for long strings.\nQuestion: Optimize the function to find the number of ways to decode a string of digits for better performance with long strings.", "system_prompt": "You are a software engineer optimizing decoding algorithms.", "passage": "You are working on a project that involves decoding messages. Each message is encoded as a string of digits, and you need to find the number of ways to decode the string. The current implementation is not efficient for long strings.", "query": "Optimize the function to find the number of ways to decode a string of digits for better performance with long strings."}
{"question": "Context: You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). The function should be optimized to handle large trees efficiently.\nQuestion: Implement and optimize a function to check if a binary tree is a valid BST, ensuring it performs well with large trees.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). The function should be optimized to handle large trees efficiently.", "query": "Implement and optimize a function to check if a binary tree is a valid BST, ensuring it performs well with large trees."}
{"question": "Context: Your team is working on a recommendation system that suggests products to users based on their purchase history. One of the tasks involves finding the most frequent elements in a list of product IDs. The current implementation is slow for large lists.\nQuestion: Optimize the function to find the top k frequent elements in a list of product IDs for better performance with large inputs.", "system_prompt": "You are a data scientist optimizing a recommendation system.", "passage": "Your team is working on a recommendation system that suggests products to users based on their purchase history. One of the tasks involves finding the most frequent elements in a list of product IDs. The current implementation is slow for large lists.", "query": "Optimize the function to find the top k frequent elements in a list of product IDs for better performance with large inputs."}
{"question": "Context: Your team is developing a feature for a financial application that involves finding unique triplets that sum to a target. The current implementation uses a brute-force approach, but it needs to be optimized to handle large datasets more efficiently.\nQuestion: Optimize the function to find unique triplets that sum to a target for better performance with large datasets.", "system_prompt": "You are a software engineer optimizing algorithms for a financial application.", "passage": "Your team is developing a feature for a financial application that involves finding unique triplets that sum to a target. The current implementation uses a brute-force approach, but it needs to be optimized to handle large datasets more efficiently.", "query": "Optimize the function to find unique triplets that sum to a target for better performance with large datasets."}
{"question": "Context: You are developing a feature for a social media application that involves finding the shortest path between two users in a network. The network is represented as a graph, where nodes represent users and edges represent connections between users. You have written some initial code, but you are not sure if it is optimal.\nQuestion: Review and optimize the code for finding the shortest path between two users in a network to ensure it performs well with large networks.", "system_prompt": "You are a Python developer tasked with optimizing code for finding the shortest path between two users in a network.", "passage": "You are developing a feature for a social media application that involves finding the shortest path between two users in a network. The network is represented as a graph, where nodes represent users and edges represent connections between users. You have written some initial code, but you are not sure if it is optimal.", "query": "Review and optimize the code for finding the shortest path between two users in a network to ensure it performs well with large networks."}
{"question": "Context: Your team is developing a feature that involves finding the longest common subsequence (LCS) between two strings. The current implementation is not efficient for long strings, leading to performance issues.\nQuestion: Rewrite the LCS function using dynamic programming to handle long strings efficiently.", "system_prompt": "You are a software engineer tasked with improving code performance.", "passage": "Your team is developing a feature that involves finding the longest common subsequence (LCS) between two strings. The current implementation is not efficient for long strings, leading to performance issues.", "query": "Rewrite the LCS function using dynamic programming to handle long strings efficiently."}
{"question": "Context: You are working on a text processing application that involves decoding strings. The current implementation uses a recursive approach, but it is not efficient for long strings. You need to optimize the function to handle long strings more effectively.\nQuestion: Optimize the decoding function to handle long strings more effectively.", "system_prompt": "You are a software engineer optimizing text processing algorithms.", "passage": "You are working on a text processing application that involves decoding strings. The current implementation uses a recursive approach, but it is not efficient for long strings. You need to optimize the function to handle long strings more effectively.", "query": "Optimize the decoding function to handle long strings more effectively."}
{"question": "Context: Your team is developing a messaging application that involves decoding a string of digits into possible letter combinations. The current implementation is not efficient for long strings, leading to performance issues.\nQuestion: Optimize the decoding function to handle long strings efficiently.", "system_prompt": "You are a software engineer tasked with optimizing string processing algorithms.", "passage": "Your team is developing a messaging application that involves decoding a string of digits into possible letter combinations. The current implementation is not efficient for long strings, leading to performance issues.", "query": "Optimize the decoding function to handle long strings efficiently."}
{"question": "Context: You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result as a list of merged intervals. The solution should be optimized for performance.\nQuestion: Write and optimize a function in Python to merge overlapping intervals, ensuring it runs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result as a list of merged intervals. The solution should be optimized for performance.", "query": "Write and optimize a function in Python to merge overlapping intervals, ensuring it runs efficiently."}
{"question": "Context: You are developing a feature for a scheduling application that involves finding the minimum number of meeting rooms required to accommodate all meetings. Each meeting is represented by a start and end time. You have written some initial code, but you are not sure if it is optimal.\nQuestion: Review and optimize the code for finding the minimum number of meeting rooms required to accommodate all meetings to ensure it performs well with large inputs.", "system_prompt": "You are a Python developer tasked with optimizing code for finding the minimum number of meeting rooms required to accommodate all meetings.", "passage": "You are developing a feature for a scheduling application that involves finding the minimum number of meeting rooms required to accommodate all meetings. Each meeting is represented by a start and end time. You have written some initial code, but you are not sure if it is optimal.", "query": "Review and optimize the code for finding the minimum number of meeting rooms required to accommodate all meetings to ensure it performs well with large inputs."}
{"question": "Context: You are developing a feature for an e-commerce application that involves finding the minimum number of coins needed to make up a given amount. The available coin denominations are provided as a list. You have written some initial code, but you are not sure if it is optimal.\nQuestion: Review and optimize the code for finding the minimum number of coins needed to make up a given amount to ensure it performs well with large inputs.", "system_prompt": "You are a Python developer tasked with optimizing code for finding the minimum number of coins needed to make up a given amount.", "passage": "You are developing a feature for an e-commerce application that involves finding the minimum number of coins needed to make up a given amount. The available coin denominations are provided as a list. You have written some initial code, but you are not sure if it is optimal.", "query": "Review and optimize the code for finding the minimum number of coins needed to make up a given amount to ensure it performs well with large inputs."}
{"question": "Context: You are working on a communication platform that involves returning all possible letter combinations for a string of digits. The current implementation uses a recursive approach, but it needs to be optimized to handle long strings of digits more efficiently.\nQuestion: Optimize the function to return all possible letter combinations for a string of digits for better performance with long strings.", "system_prompt": "You are a software engineer optimizing algorithms for a communication platform.", "passage": "You are working on a communication platform that involves returning all possible letter combinations for a string of digits. The current implementation uses a recursive approach, but it needs to be optimized to handle long strings of digits more efficiently.", "query": "Optimize the function to return all possible letter combinations for a string of digits for better performance with long strings."}
{"question": "Context: You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The function should be optimized to handle large arrays efficiently.\nQuestion: Implement and optimize a function to find the largest sum subarray, ensuring it performs well with large arrays.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The function should be optimized to handle large arrays efficiently.", "query": "Implement and optimize a function to find the largest sum subarray, ensuring it performs well with large arrays."}
{"question": "Context: You are preparing for a coding competition and need to solve a LeetCode problem that involves finding the number of islands in a grid. You have written a solution, but it seems to fail for some edge cases.\nQuestion: Identify and fix any issues in the following code for finding the number of islands in a grid: [insert code here].", "system_prompt": "You are a coding competition judge.", "passage": "You are preparing for a coding competition and need to solve a LeetCode problem that involves finding the number of islands in a grid. You have written a solution, but it seems to fail for some edge cases.", "query": "Identify and fix any issues in the following code for finding the number of islands in a grid: [insert code here]."}
{"question": "Context: You are tasked with developing a feature that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The current implementation is not handling edge cases correctly and needs improvement.\nQuestion: Implement a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases.", "system_prompt": "You are a software engineer improving string validation functions.", "passage": "You are tasked with developing a feature that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The current implementation is not handling edge cases correctly and needs improvement.", "query": "Implement a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases."}
{"question": "Context: Your team is developing a stock trading application that involves finding the maximum profit from at most two stock transactions. The current implementation is not efficient and does not handle large datasets well.\nQuestion: Extend the function to find the maximum profit from at most two stock transactions with better performance.", "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.", "passage": "Your team is developing a stock trading application that involves finding the maximum profit from at most two stock transactions. The current implementation is not efficient and does not handle large datasets well.", "query": "Extend the function to find the maximum profit from at most two stock transactions with better performance."}
{"question": "Context: You are solving a LeetCode problem where you need to implement a function to find the longest consecutive sequence in an unsorted array of integers. The function should have a time complexity of O(n). The problem statement is as follows: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You have written the following code:\n\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        nums = list(set(nums))\n        nums.sort()\n        longest_streak = 1\n        current_streak = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                current_streak += 1\n            else:\n                longest_streak = max(longest_streak, current_streak)\n                current_streak = 1\n        return max(longest_streak, current_streak)\n```\nHowever, this solution does not meet the time complexity requirement.\nQuestion: Review the provided code and rewrite it to meet the O(n) time complexity requirement.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are solving a LeetCode problem where you need to implement a function to find the longest consecutive sequence in an unsorted array of integers. The function should have a time complexity of O(n). The problem statement is as follows: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You have written the following code:\n\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        nums = list(set(nums))\n        nums.sort()\n        longest_streak = 1\n        current_streak = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                current_streak += 1\n            else:\n                longest_streak = max(longest_streak, current_streak)\n                current_streak = 1\n        return max(longest_streak, current_streak)\n```\nHowever, this solution does not meet the time complexity requirement.", "query": "Review the provided code and rewrite it to meet the O(n) time complexity requirement."}
{"question": "Context: You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The solution should be optimized to run in O(n) time complexity.\nQuestion: Implement and optimize a function in Python to find the longest consecutive sequence of integers, ensuring it runs in O(n) time complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The solution should be optimized to run in O(n) time complexity.", "query": "Implement and optimize a function in Python to find the longest consecutive sequence of integers, ensuring it runs in O(n) time complexity."}
{"question": "Context: You are working on a data analysis tool that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation uses a sliding window approach, but it needs to be optimized for better performance with large inputs.\nQuestion: Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large inputs.", "system_prompt": "You are a software engineer optimizing data analysis algorithms.", "passage": "You are working on a data analysis tool that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation uses a sliding window approach, but it needs to be optimized for better performance with large inputs.", "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large inputs."}
{"question": "Context: You are solving a LeetCode problem where you need to implement a function to find the minimum window substring in a given string s that contains all the characters of another string t. The problem statement is as follows: Given two strings s and t, return the minimum window in s which will contain all the characters in t. You have written the following code:\n\n```python\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        from collections import Counter\n        t_count = Counter(t)\n        s_count = Counter()\n        start = 0\n        min_len = float('inf')\n        min_window = ''\n        for end in range(len(s)):\n            s_count[s[end]] += 1\n            while all(s_count[char] >= t_count[char] for char in t_count):\n                if end - start + 1 < min_len:\n                    min_len = end - start + 1\n                    min_window = s[start:end+1]\n                s_count[s[start]] -= 1\n                start += 1\n        return min_window\n```\nHowever, this solution is not efficient for large input strings.\nQuestion: Review the provided code and optimize it for better performance with large input strings.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are solving a LeetCode problem where you need to implement a function to find the minimum window substring in a given string s that contains all the characters of another string t. The problem statement is as follows: Given two strings s and t, return the minimum window in s which will contain all the characters in t. You have written the following code:\n\n```python\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        from collections import Counter\n        t_count = Counter(t)\n        s_count = Counter()\n        start = 0\n        min_len = float('inf')\n        min_window = ''\n        for end in range(len(s)):\n            s_count[s[end]] += 1\n            while all(s_count[char] >= t_count[char] for char in t_count):\n                if end - start + 1 < min_len:\n                    min_len = end - start + 1\n                    min_window = s[start:end+1]\n                s_count[s[start]] -= 1\n                start += 1\n        return min_window\n```\nHowever, this solution is not efficient for large input strings.", "query": "Review the provided code and optimize it for better performance with large input strings."}
{"question": "Context: You are solving a LeetCode problem where you need to implement a function to find the maximum profit from at most two transactions on a given list of stock prices. The problem statement is as follows: You are given an array prices where prices[i] is the price of a given stock on the i-th day. Find the maximum profit you can achieve. You may complete at most two transactions. You have written the following code:\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 3 for _ in range(n)]\n        for k in range(1, 3):\n            max_diff = -prices[0]\n            for i in range(1, n):\n                dp[i][k] = max(dp[i-1][k], prices[i] + max_diff)\n                max_diff = max(max_diff, dp[i-1][k-1] - prices[i])\n        return dp[-1][2]\n```\nHowever, this solution can be optimized for space complexity.\nQuestion: Review the provided code and optimize it to reduce space complexity.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are solving a LeetCode problem where you need to implement a function to find the maximum profit from at most two transactions on a given list of stock prices. The problem statement is as follows: You are given an array prices where prices[i] is the price of a given stock on the i-th day. Find the maximum profit you can achieve. You may complete at most two transactions. You have written the following code:\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 3 for _ in range(n)]\n        for k in range(1, 3):\n            max_diff = -prices[0]\n            for i in range(1, n):\n                dp[i][k] = max(dp[i-1][k], prices[i] + max_diff)\n                max_diff = max(max_diff, dp[i-1][k-1] - prices[i])\n        return dp[-1][2]\n```\nHowever, this solution can be optimized for space complexity.", "query": "Review the provided code and optimize it to reduce space complexity."}
{"question": "Context: You are working on a project that involves processing image data. One of the tasks is to implement a function that finds the largest rectangle containing only 1's in a binary matrix. The matrix can be very large, and performance is a key concern.\nQuestion: Write a function to find the largest rectangle containing only 1's in a binary matrix. Ensure the function is efficient and handles large matrices.", "system_prompt": "You are a Python developer tasked with implementing a function to find the largest rectangle containing only 1's in a binary matrix.", "passage": "You are working on a project that involves processing image data. One of the tasks is to implement a function that finds the largest rectangle containing only 1's in a binary matrix. The matrix can be very large, and performance is a key concern.", "query": "Write a function to find the largest rectangle containing only 1's in a binary matrix. Ensure the function is efficient and handles large matrices."}
{"question": "Context: You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. The task is to return all possible letter combinations that the number could represent. For example, given the input '23', the output should be ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'].\nQuestion: Write a Python function to return all possible letter combinations that the given string of digits could represent.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. The task is to return all possible letter combinations that the number could represent. For example, given the input '23', the output should be ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'].", "query": "Write a Python function to return all possible letter combinations that the given string of digits could represent."}
{"question": "Context: You are given a list of integers and you need to find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the list [10,9,2,5,3,7,101,18], the length of the longest increasing subsequence is 4 (i.e., [2,3,7,101]).\nQuestion: Write a Python function to find the length of the longest increasing subsequence in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and you need to find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the list [10,9,2,5,3,7,101,18], the length of the longest increasing subsequence is 4 (i.e., [2,3,7,101]).", "query": "Write a Python function to find the length of the longest increasing subsequence in the given list."}
{"question": "Context: You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result. The function should be optimized to handle large lists of intervals efficiently.\nQuestion: Write and optimize a function to merge overlapping intervals, ensuring it performs well with large lists of intervals.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result. The function should be optimized to handle large lists of intervals efficiently.", "query": "Write and optimize a function to merge overlapping intervals, ensuring it performs well with large lists of intervals."}
{"question": "Context: You are practicing dynamic programming problems on LeetCode. One of the problems requires you to find the maximum sum of a subarray. You have written a solution, but you are not confident about its correctness.\nQuestion: Review the following code for finding the maximum sum of a subarray and verify its correctness: [insert code here].", "system_prompt": "You are a dynamic programming expert.", "passage": "You are practicing dynamic programming problems on LeetCode. One of the problems requires you to find the maximum sum of a subarray. You have written a solution, but you are not confident about its correctness.", "query": "Review the following code for finding the maximum sum of a subarray and verify its correctness: [insert code here]."}
{"question": "Context: You are working on a LeetCode problem where you need to implement a function to find the number of unique paths in a grid with obstacles. The problem statement is as follows: A robot is located at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Now consider if some obstacles are added to the grids. How many unique paths would there be? You have written the following code:\n\n```python\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n```\nHowever, this solution can be optimized for space complexity.\nQuestion: Review the provided code and optimize it to reduce space complexity.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are working on a LeetCode problem where you need to implement a function to find the number of unique paths in a grid with obstacles. The problem statement is as follows: A robot is located at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Now consider if some obstacles are added to the grids. How many unique paths would there be? You have written the following code:\n\n```python\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n```\nHowever, this solution can be optimized for space complexity.", "query": "Review the provided code and optimize it to reduce space complexity."}
{"question": "Context: Your team is developing a new feature for a social media platform that involves finding the shortest path between two users in a network. The current implementation uses a simple breadth-first search (BFS) algorithm, but it needs to be optimized to handle millions of users efficiently.\nQuestion: Optimize the shortest path algorithm to handle large-scale user networks efficiently.", "system_prompt": "You are a software engineer optimizing algorithms for a social media platform.", "passage": "Your team is developing a new feature for a social media platform that involves finding the shortest path between two users in a network. The current implementation uses a simple breadth-first search (BFS) algorithm, but it needs to be optimized to handle millions of users efficiently.", "query": "Optimize the shortest path algorithm to handle large-scale user networks efficiently."}
