{
  "Reasoning and categories": "The questions are designed to evaluate the AI's ability to understand and generate efficient code solutions for algorithmic problems, covering a range of topics such as data structures, algorithms, optimization, debugging, and theoretical concepts. Categories include Basic Algorithm Understanding (15 questions), Data Structures (15 questions), Optimization Techniques (10 questions), Debugging and Error Handling (10 questions), Real-world Application (10 questions), Language-Specific Questions (10 questions), Theoretical Concepts (10 questions), Code Refactoring (10 questions), and Performance Analysis (10 questions).",
  "1": "Write a function in Python that reverses a string.",
  "2": "Explain the difference between a stack and a queue.",
  "3": "What is a binary search algorithm and how does it work?",
  "4": "Provide a C++ code snippet for a linked list insertion.",
  "5": "How would you optimize a bubble sort algorithm?",
  "6": "Describe a scenario where a hash table can significantly improve data retrieval time.",
  "7": "Write a Java method that checks if a tree is a binary search tree.",
  "8": "What are the time and space complexities of a merge sort?",
  "9": "Explain the concept of recursion with an example in Python.",
  "10": "How can memoization be used to optimize a recursive Fibonacci function?",
  "11": "Identify and correct the error in this code snippet: for(int i=0; i<n; i++) { arr[i] = i+1; }",
  "12": "Write a SQL query to find the second highest salary from a 'Employee' table.",
  "13": "Describe how you would use a profiler to improve the performance of a piece of code.",
  "14": "What is a deadlock in the context of multithreading?",
  "15": "Provide an example of a greedy algorithm, and explain why it is considered greedy.",
  "16": "How would you implement a queue using two stacks in Python?",
  "17": "Write a function in JavaScript that removes all duplicates from an array.",
  "18": "Explain the difference between depth-first search and breadth-first search.",
  "19": "Provide a Ruby code snippet for performing a binary search on a sorted array.",
  "20": "What is dynamic programming, and how does it differ from brute force?",
  "21": "Write a Python function that finds the minimum value in a rotated sorted array.",
  "22": "Explain how a trie data structure is typically used in computing applications.",
  "23": "Provide a C# implementation for a graph using adjacency list.",
  "24": "What are the benefits of using a heap over a sorted array?",
  "25": "How would you detect and handle a stack overflow problem in a recursive algorithm?",
  "26": "Write a function in Python to check if a number is prime.",
  "27": "Explain the A* search algorithm and its typical use cases.",
  "28": "Provide a Java implementation for a circular queue using an array.",
  "29": "What is the significance of tail recursion in functional programming?",
  "30": "How can you improve the time complexity of an insertion in a linked list?",
  "31": "Write a Python script that merges two sorted lists into a single sorted list.",
  "32": "Explain how garbage collection works in Java and its impact on performance.",
  "33": "Provide a C++ function that calculates the n-th Fibonacci number using dynamic programming.",
  "34": "What is the best way to handle errors in a recursive algorithm to prevent crashes?",
  "35": "Describe how you would refactor a nested loop to reduce its complexity.",
  "36": "Write a SQL query to delete duplicate records from a table without using a temporary table.",
  "37": "Explain the concept of 'Big O' notation and provide examples of O(1), O(n), and O(n^2) complexities.",
  "38": "Provide a JavaScript function that sorts an array using the quicksort algorithm.",
  "39": "What is the difference between imperative and declarative programming styles?",
  "40": "How would you use a hash map to count the frequency of characters in a string?",
  "41": "Write a function in Python that converts a binary tree into a doubly linked list.",
  "42": "Explain the use of bit manipulation techniques in solving algorithmic problems.",
  "43": "Provide a Ruby implementation for detecting a cycle in a linked list.",
  "44": "What are the advantages of using recursion over iterative solutions in certain problems?",
  "45": "How would you optimize the search operation in an unsorted array?",
  "46": "Write a Python function that finds the longest consecutive sequence in an array.",
  "47": "Explain how object-oriented programming can help in writing cleaner and more modular code.",
  "48": "Provide a Java method that efficiently finds the common elements in two arrays.",
  "49": "What is memoization, and how can it be implemented in a recursive algorithm?",
  "50": "How would you refactor a piece of code that uses multiple if-else statements to make it cleaner?",
  "51": "Write a function in C++ that checks if a graph is bipartite using BFS.",
  "52": "Explain the difference between synchronous and asynchronous programming.",
  "53": "Provide a Python implementation for a stack that supports push, pop, and retrieving the minimum element in constant time.",
  "54": "What is the role of a compiler in code optimization?",
  "55": "How would you handle integer overflow in a language that does not inherently support big integers?",
  "56": "Write a JavaScript function that detects if a linked list has a cycle.",
  "57": "Explain the concept of 'divide and conquer' with an example in algorithm design.",
  "58": "Provide a Ruby code snippet for a depth-first search on a graph.",
  "59": "What are the typical use cases for using a breadth-first search in algorithms?",
  "60": "How can you ensure that your code is both efficient and easy to understand?",
  "61": "Write a Python function that implements the sieve of Eratosthenes algorithm for finding all primes up to n.",
  "62": "Explain the importance of data structure choice in algorithm efficiency.",
  "63": "Provide a C# function that reverses the words in a sentence without reversing the characters within the words.",
  "64": "What are the common pitfalls in recursive programming and how can they be avoided?",
  "65": "How would you refactor a complex switch-case statement to improve code maintainability?",
  "66": "Write a SQL query that finds all employees who do not have a manager in the same department.",
  "67": "Explain the difference between lossless and lossy data compression algorithms.",
  "68": "Provide a JavaScript implementation for a function that calculates the area of a polygon given its vertices.",
  "69": "What is the difference between procedural and object-oriented programming?",
  "70": "How would you use a set to remove duplicates from a list efficiently?",
  "71": "Write a function in Python that finds all subsets of a given set.",
  "72": "Explain how dynamic programming differs from greedy algorithms.",
  "73": "Provide a Ruby implementation for a function that checks if a string is a palindrome.",
  "74": "What are the advantages of using a linked list over an array for certain types of operations?",
  "75": "How would you detect memory leaks in a program?",
  "76": "Write a Python script that simulates rolling a six-sided die 1000 times and counts the frequency of each result.",
  "77": "Explain the concept of software design patterns and their importance in code reuse and maintenance.",
  "78": "Provide a Java method that efficiently merges multiple sorted arrays into one sorted array.",
  "79": "What is tail call optimization, and how does it affect recursive functions?",
  "80": "How can you improve the insertion time in a binary search tree?",
  "81": "Write a Python function that converts a Roman numeral to an integer.",
  "82": "Explain how caching can be used to enhance the performance of a web application.",
  "83": "Provide a C++ class that implements a basic digital clock using the system time.",
  "84": "What are the best practices for error handling in software development?",
  "85": "How would you refactor a long method into smaller, more manageable parts?",
  "86": "Write a SQL query that creates a view showing the top 3 highest earning employees in each department.",
  "87": "Explain the difference between an abstract class and an interface in object-oriented programming.",
  "88": "Provide a JavaScript function that implements the insertion sort algorithm.",
  "89": "What is the significance of unit testing in maintaining code quality?",
  "90": "How would you use a vector in C++ to dynamically store elements during runtime?",
  "91": "Write a function in Python that calculates the sum of all numbers in a file containing integers.",
  "92": "Explain how the Model-View-Controller (MVC) pattern works in web development.",
  "93": "Provide a Ruby method that serializes a tree data structure into a flat array.",
  "94": "What are the challenges of parallel programming, and how can they be mitigated?",
  "95": "How would you optimize a SQL query that takes too long to execute?",
  "96": "Write a JavaScript function that converts an array of strings into a map where each key is a string length and each value is an array of strings of that length.",
  "97": "Explain the role of garbage collection in managed languages like Java and C#.",
  "98": "Provide a Java implementation for a function that finds the longest palindromic substring in a given string.",
  "99": "What is the difference between static and dynamic typing?",
  "100": "How would you implement a simple version control system for text files?"
}