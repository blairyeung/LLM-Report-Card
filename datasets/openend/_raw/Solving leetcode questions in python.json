{
    "1": {
        "passage": "You are preparing for a coding interview and have been practicing LeetCode problems. You recently encountered a problem where you need to find the longest substring without repeating characters. You have written some code, but it doesn't seem to work correctly for all test cases.",
        "system_prompt": "You are a coding interview coach.",
        "query": "Review the following code for finding the longest substring without repeating characters and identify any errors or improvements: [insert code here].",
        "tldr": "Review and debug code for longest substring without repeating characters."
    },
    "2": {
        "passage": "You are working on a LeetCode problem where you need to merge two sorted linked lists. You have written a solution, but you are unsure if it is optimal in terms of time and space complexity.",
        "system_prompt": "You are a coding mentor.",
        "query": "Analyze the following code for merging two sorted linked lists and suggest any optimizations: [insert code here].",
        "tldr": "Analyze and optimize code for merging sorted linked lists."
    },
    "3": {
        "passage": "You are solving a LeetCode problem that requires you to find the median of two sorted arrays. You have come up with a solution, but it seems to be running slower than expected.",
        "system_prompt": "You are a competitive programming coach.",
        "query": "Evaluate the performance of the following code for finding the median of two sorted arrays and suggest ways to improve its efficiency: [insert code here].",
        "tldr": "Evaluate and improve code for finding median of sorted arrays."
    },
    "4": {
        "passage": "You are practicing dynamic programming problems on LeetCode. One of the problems requires you to find the maximum sum of a subarray. You have written a solution, but you are not confident about its correctness.",
        "system_prompt": "You are a dynamic programming expert.",
        "query": "Review the following code for finding the maximum sum of a subarray and verify its correctness: [insert code here].",
        "tldr": "Review and verify code for maximum sum subarray."
    },
    "5": {
        "passage": "You are preparing for a coding competition and need to solve a LeetCode problem that involves finding the number of islands in a grid. You have written a solution, but it seems to fail for some edge cases.",
        "system_prompt": "You are a coding competition judge.",
        "query": "Identify and fix any issues in the following code for finding the number of islands in a grid: [insert code here].",
        "tldr": "Identify and fix issues in code for finding number of islands."
    },
    "6": {
        "passage": "You are solving a LeetCode problem that requires you to implement a LRU (Least Recently Used) cache. You have written a solution, but you are unsure if it meets the problem's requirements.",
        "system_prompt": "You are a software engineering instructor.",
        "query": "Evaluate the following code for implementing a LRU cache and ensure it meets the problem's requirements: [insert code here].",
        "tldr": "Evaluate and ensure code for LRU cache meets requirements."
    },
    "7": {
        "passage": "You are working on a LeetCode problem that involves finding the k-th largest element in an array. You have written a solution, but you are not sure if it is the most efficient approach.",
        "system_prompt": "You are an algorithm optimization expert.",
        "query": "Analyze the following code for finding the k-th largest element in an array and suggest any optimizations: [insert code here].",
        "tldr": "Analyze and optimize code for finding k-th largest element."
    },
    "8": {
        "passage": "You are practicing graph-related problems on LeetCode. One of the problems requires you to find the shortest path in a weighted graph. You have written a solution, but it seems to be incorrect for some test cases.",
        "system_prompt": "You are a graph theory specialist.",
        "query": "Review the following code for finding the shortest path in a weighted graph and identify any errors: [insert code here].",
        "tldr": "Review and identify errors in code for shortest path in weighted graph."
    },
    "9": {
        "passage": "You are solving a LeetCode problem that involves checking if a binary tree is a valid binary search tree (BST). You have written a solution, but you are not confident about its correctness.",
        "system_prompt": "You are a data structures tutor.",
        "query": "Review the following code for checking if a binary tree is a valid BST and verify its correctness: [insert code here].",
        "tldr": "Review and verify code for checking valid BST."
    },
    "10": {
        "passage": "You are preparing for a technical interview and need to solve a LeetCode problem that involves finding the longest palindromic substring. You have written a solution, but it seems to be inefficient.",
        "system_prompt": "You are a technical interview coach.",
        "query": "Evaluate the following code for finding the longest palindromic substring and suggest ways to improve its efficiency: [insert code here].",
        "tldr": "Evaluate and improve code for finding longest palindromic substring."
    },
    "11": {
        "passage": "You are working on a LeetCode problem where you need to implement a function to find the first missing positive integer in an unsorted integer array. The function should have a time complexity of O(n) and use constant extra space. The problem statement is as follows: Given an unsorted integer array nums, return the smallest missing positive integer. You have written the following code:\n\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        nums.sort()\n        missing = 1\n        for num in nums:\n            if num == missing:\n                missing += 1\n        return missing\n```\nHowever, this solution does not meet the time complexity and space requirements.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and rewrite it to meet the O(n) time complexity and constant space requirements.",
        "tldr": "Rewrite code to find first missing positive integer with O(n) time and constant space."
    },
    "12": {
        "passage": "You are solving a LeetCode problem where you need to implement a function to find the longest consecutive sequence in an unsorted array of integers. The function should have a time complexity of O(n). The problem statement is as follows: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You have written the following code:\n\n```python\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        nums = list(set(nums))\n        nums.sort()\n        longest_streak = 1\n        current_streak = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                current_streak += 1\n            else:\n                longest_streak = max(longest_streak, current_streak)\n                current_streak = 1\n        return max(longest_streak, current_streak)\n```\nHowever, this solution does not meet the time complexity requirement.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and rewrite it to meet the O(n) time complexity requirement.",
        "tldr": "Rewrite code to find longest consecutive sequence with O(n) time complexity."
    },
    "13": {
        "passage": "You are working on a LeetCode problem where you need to implement a function to find the maximum product subarray in an array of integers. The problem statement is as follows: Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. You have written the following code:\n\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = float('-inf')\n        for i in range(len(nums)):\n            product = 1\n            for j in range(i, len(nums)):\n                product *= nums[j]\n                max_product = max(max_product, product)\n        return max_product\n```\nHowever, this solution has a time complexity of O(n^2).",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it to achieve a time complexity of O(n).",
        "tldr": "Optimize code to find maximum product subarray with O(n) time complexity."
    },
    "14": {
        "passage": "You are solving a LeetCode problem where you need to implement a function to find the minimum window substring in a given string s that contains all the characters of another string t. The problem statement is as follows: Given two strings s and t, return the minimum window in s which will contain all the characters in t. You have written the following code:\n\n```python\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        from collections import Counter\n        t_count = Counter(t)\n        s_count = Counter()\n        start = 0\n        min_len = float('inf')\n        min_window = ''\n        for end in range(len(s)):\n            s_count[s[end]] += 1\n            while all(s_count[char] >= t_count[char] for char in t_count):\n                if end - start + 1 < min_len:\n                    min_len = end - start + 1\n                    min_window = s[start:end+1]\n                s_count[s[start]] -= 1\n                start += 1\n        return min_window\n```\nHowever, this solution is not efficient for large input strings.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it for better performance with large input strings.",
        "tldr": "Optimize code to find minimum window substring for better performance with large inputs."
    },
    "15": {
        "passage": "You are working on a LeetCode problem where you need to implement a function to find the number of unique paths in a grid with obstacles. The problem statement is as follows: A robot is located at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Now consider if some obstacles are added to the grids. How many unique paths would there be? You have written the following code:\n\n```python\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n```\nHowever, this solution can be optimized for space complexity.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it to reduce space complexity.",
        "tldr": "Optimize code to find unique paths in a grid with obstacles, reducing space complexity."
    },
    "16": {
        "passage": "You are solving a LeetCode problem where you need to implement a function to find the longest increasing path in a matrix. The problem statement is as follows: Given an m x n integers matrix, return the length of the longest increasing path in the matrix. You have written the following code:\n\n```python\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[-1] * n for _ in range(m)]\n        def dfs(i, j):\n            if dp[i][j] != -1:\n                return dp[i][j]\n            max_len = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_len = max(max_len, 1 + dfs(x, y))\n            dp[i][j] = max_len\n            return max_len\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n```\nHowever, this solution can be optimized for better performance.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it for better performance.",
        "tldr": "Optimize code to find the longest increasing path in a matrix for better performance."
    },
    "17": {
        "passage": "You are working on a LeetCode problem where you need to implement a function to find the number of ways to decode a string. The problem statement is as follows: A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. Given a non-empty string containing only digits, determine the total number of ways to decode it. You have written the following code:\n\n```python\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if not s or s[0] == '0':\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0], dp[1] = 1, 1\n        for i in range(2, n + 1):\n            if s[i-1] != '0':\n                dp[i] += dp[i-1]\n            if 10 <= int(s[i-2:i]) <= 26:\n                dp[i] += dp[i-2]\n        return dp[n]\n```\nHowever, this solution can be optimized for space complexity.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it to reduce space complexity.",
        "tldr": "Optimize code to find the number of ways to decode a string, reducing space complexity."
    },
    "18": {
        "passage": "You are solving a LeetCode problem where you need to implement a function to find the maximum profit from at most two transactions on a given list of stock prices. The problem statement is as follows: You are given an array prices where prices[i] is the price of a given stock on the i-th day. Find the maximum profit you can achieve. You may complete at most two transactions. You have written the following code:\n\n```python\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 3 for _ in range(n)]\n        for k in range(1, 3):\n            max_diff = -prices[0]\n            for i in range(1, n):\n                dp[i][k] = max(dp[i-1][k], prices[i] + max_diff)\n                max_diff = max(max_diff, dp[i-1][k-1] - prices[i])\n        return dp[-1][2]\n```\nHowever, this solution can be optimized for space complexity.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it to reduce space complexity.",
        "tldr": "Optimize code to find maximum profit from at most two stock transactions, reducing space complexity."
    },
    "19": {
        "passage": "You are working on a LeetCode problem where you need to implement a function to find the minimum number of coins needed to make up a given amount. The problem statement is as follows: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You have written the following code:\n\n```python\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for x in range(coin, amount + 1):\n                dp[x] = min(dp[x], dp[x - coin] + 1)\n        return dp[amount] if dp[amount] != float('inf') else -1\n```\nHowever, this solution can be optimized for better performance.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it for better performance.",
        "tldr": "Optimize code to find the minimum number of coins needed to make up a given amount for better performance."
    },
    "20": {
        "passage": "You are solving a LeetCode problem where you need to implement a function to find the maximum sum of a subarray with at most k distinct elements. The problem statement is as follows: Given an integer array nums and an integer k, return the maximum sum of a subarray that contains at most k distinct elements. You have written the following code:\n\n```python\nclass Solution:\n    def maxSumKDistinct(self, nums: List[int], k: int) -> int:\n        from collections import defaultdict\n        n = len(nums)\n        max_sum = 0\n        current_sum = 0\n        left = 0\n        count = defaultdict(int)\n        for right in range(n):\n            count[nums[right]] += 1\n            current_sum += nums[right]\n            while len(count) > k:\n                count[nums[left]] -= 1\n                if count[nums[left]] == 0:\n                    del count[nums[left]]\n                current_sum -= nums[left]\n                left += 1\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n```\nHowever, this solution can be optimized for better performance.",
        "system_prompt": "You are a Python coding expert specializing in LeetCode problems.",
        "query": "Review the provided code and optimize it for better performance.",
        "tldr": "Optimize code to find the maximum sum of a subarray with at most k distinct elements for better performance."
    },
    "21": {
        "passage": "You are working on a project that involves processing large datasets. One of the tasks requires you to find the top k frequent elements in a list of integers. The list can be very large, and performance is a key concern. You have written some initial code, but you are not sure if it is optimal.",
        "system_prompt": "You are a Python developer tasked with optimizing code for finding the top k frequent elements in a list.",
        "query": "Review and optimize the code for finding the top k frequent elements in a list to ensure it performs well with large datasets.",
        "tldr": "Optimize code for top k frequent elements in a list."
    },
    "22": {
        "passage": "You have been given a task to implement a function that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should be efficient and handle edge cases such as empty strings and strings with only non-alphanumeric characters.",
        "system_prompt": "You are a Python developer tasked with implementing a function to check for valid palindromes.",
        "query": "Write a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Ensure the function handles edge cases efficiently.",
        "tldr": "Implement a function to check for valid palindromes."
    },
    "23": {
        "passage": "You are working on a project that involves analyzing stock prices. One of the tasks is to find the best time to buy and sell a stock to maximize profit. You have written some initial code, but you are not sure if it handles all edge cases and performs optimally.",
        "system_prompt": "You are a Python developer tasked with optimizing code for finding the best time to buy and sell a stock.",
        "query": "Review and optimize the code for finding the best time to buy and sell a stock to ensure it handles all edge cases and performs optimally.",
        "tldr": "Optimize code for finding the best time to buy and sell a stock."
    },
    "24": {
        "passage": "You are developing a web application that requires user authentication. One of the tasks is to implement a function that checks if a given password is strong. A strong password is defined as one that has at least 8 characters, includes both uppercase and lowercase letters, contains at least one digit, and has at least one special character.",
        "system_prompt": "You are a Python developer tasked with implementing a function to check for strong passwords.",
        "query": "Write a function to check if a given password is strong based on the specified criteria. Ensure the function is efficient and handles edge cases.",
        "tldr": "Implement a function to check for strong passwords."
    },
    "25": {
        "passage": "You are working on a project that involves processing text data. One of the tasks is to implement a function that finds the longest common prefix among a list of strings. The function should be efficient and handle edge cases such as an empty list or a list with only one string.",
        "system_prompt": "You are a Python developer tasked with implementing a function to find the longest common prefix among a list of strings.",
        "query": "Write a function to find the longest common prefix among a list of strings. Ensure the function is efficient and handles edge cases.",
        "tldr": "Implement a function to find the longest common prefix among a list of strings."
    },
    "26": {
        "passage": "You are developing a feature for a social media application that involves finding the shortest path between two users in a network. The network is represented as a graph, where nodes represent users and edges represent connections between users. You have written some initial code, but you are not sure if it is optimal.",
        "system_prompt": "You are a Python developer tasked with optimizing code for finding the shortest path between two users in a network.",
        "query": "Review and optimize the code for finding the shortest path between two users in a network to ensure it performs well with large networks.",
        "tldr": "Optimize code for finding the shortest path between two users in a network."
    },
    "27": {
        "passage": "You are working on a project that involves processing numerical data. One of the tasks is to implement a function that finds the maximum product of three numbers in a list. The list can be very large, and performance is a key concern.",
        "system_prompt": "You are a Python developer tasked with implementing a function to find the maximum product of three numbers in a list.",
        "query": "Write a function to find the maximum product of three numbers in a list. Ensure the function is efficient and handles large lists.",
        "tldr": "Implement a function to find the maximum product of three numbers in a list."
    },
    "28": {
        "passage": "You are developing a feature for an e-commerce application that involves finding the minimum number of coins needed to make up a given amount. The available coin denominations are provided as a list. You have written some initial code, but you are not sure if it is optimal.",
        "system_prompt": "You are a Python developer tasked with optimizing code for finding the minimum number of coins needed to make up a given amount.",
        "query": "Review and optimize the code for finding the minimum number of coins needed to make up a given amount to ensure it performs well with large inputs.",
        "tldr": "Optimize code for finding the minimum number of coins needed to make up a given amount."
    },
    "29": {
        "passage": "You are working on a project that involves processing image data. One of the tasks is to implement a function that finds the largest rectangle containing only 1's in a binary matrix. The matrix can be very large, and performance is a key concern.",
        "system_prompt": "You are a Python developer tasked with implementing a function to find the largest rectangle containing only 1's in a binary matrix.",
        "query": "Write a function to find the largest rectangle containing only 1's in a binary matrix. Ensure the function is efficient and handles large matrices.",
        "tldr": "Implement a function to find the largest rectangle containing only 1's in a binary matrix."
    },
    "30": {
        "passage": "You are developing a feature for a scheduling application that involves finding the minimum number of meeting rooms required to accommodate all meetings. Each meeting is represented by a start and end time. You have written some initial code, but you are not sure if it is optimal.",
        "system_prompt": "You are a Python developer tasked with optimizing code for finding the minimum number of meeting rooms required to accommodate all meetings.",
        "query": "Review and optimize the code for finding the minimum number of meeting rooms required to accommodate all meetings to ensure it performs well with large inputs.",
        "tldr": "Optimize code for finding the minimum number of meeting rooms required to accommodate all meetings."
    },
    "31": {
        "passage": "You are given an array of integers representing the heights of a series of buildings. The goal is to find the maximum area of water that can be trapped between two buildings. The heights are given in a list, and the width between each pair of buildings is 1 unit. For example, given the list [1,8,6,2,5,4,8,3,7], the maximum area of water that can be trapped is 49.",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the maximum area of water that can be trapped between two buildings in the given list of heights.",
        "tldr": "Write a function to find the maximum area of water trapped between buildings."
    },
    "32": {
        "passage": "You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. The task is to return all possible letter combinations that the number could represent. For example, given the input '23', the output should be ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'].",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to return all possible letter combinations that the given string of digits could represent.",
        "tldr": "Write a function to return all possible letter combinations for a string of digits."
    },
    "33": {
        "passage": "You are given a list of integers and a target sum. The task is to find all unique triplets in the list that sum up to the target sum. Each triplet should be sorted in ascending order, and the solution set should not contain duplicate triplets. For example, given the list [-1, 0, 1, 2, -1, -4] and target sum 0, the output should be [[-1, -1, 2], [-1, 0, 1]].",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find all unique triplets in the list that sum up to the target sum.",
        "tldr": "Write a function to find all unique triplets that sum to a target."
    },
    "34": {
        "passage": "You are given a binary tree and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key, the right subtree of a node contains only nodes with keys greater than the node's key, and both left and right subtrees must also be binary search trees.",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to determine if the given binary tree is a valid binary search tree.",
        "tldr": "Write a function to check if a binary tree is a valid BST."
    },
    "35": {
        "passage": "You are given a list of intervals where each interval is represented as a pair of start and end times. The task is to merge all overlapping intervals and return the list of merged intervals. For example, given the list [[1,3],[2,6],[8,10],[15,18]], the output should be [[1,6],[8,10],[15,18]].",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to merge all overlapping intervals in the given list.",
        "tldr": "Write a function to merge overlapping intervals."
    },
    "36": {
        "passage": "You are given a list of integers and you need to find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the list [10,9,2,5,3,7,101,18], the length of the longest increasing subsequence is 4 (i.e., [2,3,7,101]).",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the length of the longest increasing subsequence in the given list.",
        "tldr": "Write a function to find the length of the longest increasing subsequence."
    },
    "37": {
        "passage": "You are given a list of integers and you need to find the maximum product of three numbers in the list. For example, given the list [1,2,3,4], the maximum product is 24 (i.e., 2*3*4).",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the maximum product of three numbers in the given list.",
        "tldr": "Write a function to find the maximum product of three numbers."
    },
    "38": {
        "passage": "You are given a list of integers and you need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, given the list [-2,1,-3,4,-1,2,1,-5,4], the largest sum is 6 (i.e., [4,-1,2,1]).",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the contiguous subarray with the largest sum in the given list.",
        "tldr": "Write a function to find the contiguous subarray with the largest sum."
    },
    "39": {
        "passage": "You are given a list of integers and you need to find the first missing positive integer. The algorithm should run in O(n) time and use constant extra space. For example, given the list [3,4,-1,1], the first missing positive integer is 2.",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the first missing positive integer in the given list.",
        "tldr": "Write a function to find the first missing positive integer."
    },
    "40": {
        "passage": "You are given a list of integers and you need to find the longest consecutive sequence of integers. The algorithm should run in O(n) time. For example, given the list [100, 4, 200, 1, 3, 2], the longest consecutive sequence is [1, 2, 3, 4].",
        "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the longest consecutive sequence of integers in the given list.",
        "tldr": "Write a function to find the longest consecutive sequence of integers."
    },
    "41": {
        "passage": "You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings after it rains. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the maximum area of water trapped between buildings, ensuring it is optimized for time and space complexity.",
        "tldr": "Write and optimize a function to find the maximum trapped water between buildings."
    },
    "42": {
        "passage": "You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. Your task is to return all possible letter combinations that the number could represent. The function should be efficient and handle large inputs gracefully.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement a Python function to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently.",
        "tldr": "Implement and optimize a function to return all possible letter combinations for a string of digits."
    },
    "43": {
        "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum up to the target. The solution should avoid duplicate triplets and be optimized for performance.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find all unique triplets in an array that sum to a target, ensuring it avoids duplicates and is optimized for performance.",
        "tldr": "Write and optimize a function to find unique triplets that sum to a target."
    },
    "44": {
        "passage": "You are given a binary tree and need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement a Python function to check if a binary tree is a valid BST, ensuring it is efficient and handles edge cases.",
        "tldr": "Implement and optimize a function to check if a binary tree is a valid BST."
    },
    "45": {
        "passage": "You are given a list of intervals where each interval is represented as a pair of start and end times. Your task is to merge all overlapping intervals and return the list of merged intervals. The function should be efficient and handle large lists of intervals.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to merge overlapping intervals, ensuring it is efficient and handles large lists of intervals.",
        "tldr": "Write and optimize a function to merge overlapping intervals."
    },
    "46": {
        "passage": "You are given an unsorted array of integers. Your task is to find the length of the longest increasing subsequence in the array. The function should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement a Python function to find the length of the longest increasing subsequence in an array, ensuring it is optimized for time and space complexity.",
        "tldr": "Implement and optimize a function to find the longest increasing subsequence."
    },
    "47": {
        "passage": "You are given an array of integers. Your task is to find the maximum product of three numbers in the array. The function should be efficient and handle large arrays.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the maximum product of three numbers in an array, ensuring it is efficient and handles large arrays.",
        "tldr": "Write and optimize a function to find the maximum product of three numbers."
    },
    "48": {
        "passage": "You are given an array of integers. Your task is to find the contiguous subarray within the array that has the largest sum. The function should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement a Python function to find the contiguous subarray with the largest sum, ensuring it is optimized for time and space complexity.",
        "tldr": "Implement and optimize a function to find the largest sum subarray."
    },
    "49": {
        "passage": "You are given an unsorted array of integers. Your task is to find the first missing positive integer in linear time and using constant space. The function should be efficient and handle large arrays.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write a Python function to find the first missing positive integer in linear time and using constant space, ensuring it is efficient and handles large arrays.",
        "tldr": "Write and optimize a function to find the first missing positive integer."
    },
    "50": {
        "passage": "You are given an unsorted array of integers. Your task is to find the longest consecutive sequence of integers in the array. The function should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement a Python function to find the longest consecutive sequence of integers in an array, ensuring it is optimized for time and space complexity.",
        "tldr": "Implement and optimize a function to find the longest consecutive sequence."
    },
    "51": {
        "passage": "You are working on a project that involves processing large datasets. One of the tasks requires you to find the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. You have written a function to solve this problem, but it is not performing efficiently for large inputs.",
        "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.",
        "query": "Optimize the function to find the k-th smallest element in a sorted matrix to improve its performance for large inputs.",
        "tldr": "Optimize code for k-th smallest element in a sorted matrix."
    },
    "52": {
        "passage": "During a code review, you come across a function that is supposed to find the longest common subsequence (LCS) between two strings. The current implementation uses a recursive approach, which leads to a high time complexity and stack overflow errors for long strings.",
        "system_prompt": "You are a senior developer reviewing code for efficiency and correctness.",
        "query": "Rewrite the function to find the longest common subsequence using dynamic programming to handle long strings efficiently.",
        "tldr": "Rewrite LCS function using dynamic programming."
    },
    "53": {
        "passage": "You are developing a feature for a social media platform that involves finding the shortest path between two users in a network. The network is represented as an undirected graph, and you need to ensure that the solution is both correct and efficient.",
        "system_prompt": "You are a software engineer working on graph algorithms for a social media platform.",
        "query": "Implement and optimize a function to find the shortest path between two users in an undirected graph.",
        "tldr": "Implement and optimize shortest path in an undirected graph."
    },
    "54": {
        "passage": "Your team is working on a recommendation system that suggests products to users based on their purchase history. One of the tasks involves finding the most frequent elements in a list of product IDs. The current implementation is slow for large lists.",
        "system_prompt": "You are a data scientist optimizing a recommendation system.",
        "query": "Optimize the function to find the top k frequent elements in a list of product IDs for better performance with large inputs.",
        "tldr": "Optimize top k frequent elements function."
    },
    "55": {
        "passage": "You are tasked with developing a feature that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The current implementation is not handling edge cases correctly and needs improvement.",
        "system_prompt": "You are a software engineer improving string validation functions.",
        "query": "Implement a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases.",
        "tldr": "Implement valid palindrome function."
    },
    "56": {
        "passage": "Your team is working on a financial application that involves calculating the maximum profit from stock transactions. The current function calculates the maximum profit from at most one transaction, but you need to extend it to handle at most two transactions.",
        "system_prompt": "You are a financial software developer enhancing stock transaction algorithms.",
        "query": "Extend the function to calculate the maximum profit from at most two stock transactions.",
        "tldr": "Extend function for max profit from two stock transactions."
    },
    "57": {
        "passage": "You are developing a feature for a payment system that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a greedy approach, which does not always yield the correct result.",
        "system_prompt": "You are a software engineer improving algorithms for a payment system.",
        "query": "Rewrite the function to find the minimum number of coins needed to make up a given amount using dynamic programming for accurate results.",
        "tldr": "Rewrite minimum coins function using dynamic programming."
    },
    "58": {
        "passage": "You are working on a project that involves decoding messages. Each message is encoded as a string of digits, and you need to find the number of ways to decode the string. The current implementation is not efficient for long strings.",
        "system_prompt": "You are a software engineer optimizing decoding algorithms.",
        "query": "Optimize the function to find the number of ways to decode a string of digits for better performance with long strings.",
        "tldr": "Optimize decoding function for long strings."
    },
    "59": {
        "passage": "Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation is not efficient for large matrices and needs optimization.",
        "system_prompt": "You are a software engineer optimizing pathfinding algorithms for a mapping application.",
        "query": "Optimize the function to find the longest increasing path in a matrix for better performance with large matrices.",
        "tldr": "Optimize longest increasing path function in a matrix."
    },
    "60": {
        "passage": "You are tasked with developing a feature that finds the maximum sum of a subarray with at most k distinct elements. The current implementation is not performing well for large arrays and needs optimization.",
        "system_prompt": "You are a software engineer optimizing array processing algorithms.",
        "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large arrays.",
        "tldr": "Optimize max sum subarray with k distinct elements function."
    },
    "61": {
        "passage": "You are given an array of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function in Python to find the maximum area of water trapped between buildings, ensuring it runs in O(n) time complexity.",
        "tldr": "Write and optimize a function to find the maximum trapped water between buildings."
    },
    "62": {
        "passage": "You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be efficient and handle large inputs gracefully.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function in Python to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently.",
        "tldr": "Implement and optimize a function to return all possible letter combinations for a string of digits."
    },
    "63": {
        "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The solution should avoid duplicate triplets and be optimized for performance.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function in Python to find all unique triplets in an array that sum to a target, ensuring no duplicate triplets are included.",
        "tldr": "Write and optimize a function to find unique triplets that sum to a target."
    },
    "64": {
        "passage": "You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function in Python to check if a binary tree is a valid BST, ensuring it runs efficiently.",
        "tldr": "Implement and optimize a function to check if a binary tree is a valid BST."
    },
    "65": {
        "passage": "You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result as a list of merged intervals. The solution should be optimized for performance.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function in Python to merge overlapping intervals, ensuring it runs efficiently.",
        "tldr": "Write and optimize a function to merge overlapping intervals."
    },
    "66": {
        "passage": "You are given an array of integers, and you need to find the length of the longest increasing subsequence. The subsequence does not need to be contiguous, but the elements must be in increasing order. The solution should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function in Python to find the length of the longest increasing subsequence, ensuring it runs efficiently.",
        "tldr": "Implement and optimize a function to find the length of the longest increasing subsequence."
    },
    "67": {
        "passage": "You are given an array of integers, and you need to find the maximum product of three numbers in the array. The solution should be optimized for performance and handle both positive and negative numbers.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function in Python to find the maximum product of three numbers in an array, ensuring it runs efficiently.",
        "tldr": "Write and optimize a function to find the maximum product of three numbers."
    },
    "68": {
        "passage": "You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The solution should be optimized for both time and space complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function in Python to find the largest sum subarray, ensuring it runs efficiently.",
        "tldr": "Implement and optimize a function to find the largest sum subarray."
    },
    "69": {
        "passage": "You are given an unsorted array of integers, and you need to find the first missing positive integer. The solution should be optimized to run in O(n) time complexity and use constant space.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function in Python to find the first missing positive integer, ensuring it runs in O(n) time complexity and uses constant space.",
        "tldr": "Write and optimize a function to find the first missing positive integer."
    },
    "70": {
        "passage": "You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The solution should be optimized to run in O(n) time complexity.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function in Python to find the longest consecutive sequence of integers, ensuring it runs in O(n) time complexity.",
        "tldr": "Implement and optimize a function to find the longest consecutive sequence."
    },
    "71": {
        "passage": "You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. The current implementation uses a brute-force approach, which is not efficient for large datasets.",
        "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.",
        "query": "Optimize the code to find the k-th smallest element in a sorted matrix with better time complexity.",
        "tldr": "Optimize code for k-th smallest element in a sorted matrix."
    },
    "72": {
        "passage": "Your team is developing a feature that involves finding the longest common subsequence (LCS) between two strings. The current implementation is not efficient for long strings, leading to performance issues.",
        "system_prompt": "You are a software engineer tasked with improving code performance.",
        "query": "Rewrite the LCS function using dynamic programming to handle long strings efficiently.",
        "tldr": "Rewrite LCS function using dynamic programming."
    },
    "73": {
        "passage": "You are working on a navigation system that requires finding the shortest path in an undirected graph. The current implementation uses a simple breadth-first search (BFS) algorithm, which is not optimal for large graphs with weighted edges.",
        "system_prompt": "You are a software engineer tasked with optimizing graph algorithms.",
        "query": "Implement and optimize the shortest path algorithm for an undirected graph with weighted edges.",
        "tldr": "Implement and optimize shortest path in an undirected graph."
    },
    "74": {
        "passage": "Your team is developing a recommendation system that involves finding the top k frequent elements in a list. The current implementation uses a sorting-based approach, which is not efficient for large lists.",
        "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.",
        "query": "Optimize the function to find the top k frequent elements in a list with better time complexity.",
        "tldr": "Optimize top k frequent elements function."
    },
    "75": {
        "passage": "You are working on a security feature that involves checking if a given string is a valid palindrome. The current implementation does not handle edge cases such as ignoring non-alphanumeric characters and case sensitivity.",
        "system_prompt": "You are a software engineer tasked with implementing security features.",
        "query": "Implement a function to check if a given string is a valid palindrome, considering edge cases.",
        "tldr": "Implement valid palindrome function."
    },
    "76": {
        "passage": "Your team is developing a stock trading application that involves finding the maximum profit from at most two stock transactions. The current implementation is not efficient and does not handle large datasets well.",
        "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.",
        "query": "Extend the function to find the maximum profit from at most two stock transactions with better performance.",
        "tldr": "Extend function for max profit from two stock transactions."
    },
    "77": {
        "passage": "You are working on a financial application that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, which is not efficient for large amounts.",
        "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.",
        "query": "Rewrite the minimum coins function using dynamic programming to handle large amounts efficiently.",
        "tldr": "Rewrite minimum coins function using dynamic programming."
    },
    "78": {
        "passage": "Your team is developing a messaging application that involves decoding a string of digits into possible letter combinations. The current implementation is not efficient for long strings, leading to performance issues.",
        "system_prompt": "You are a software engineer tasked with optimizing string processing algorithms.",
        "query": "Optimize the decoding function to handle long strings efficiently.",
        "tldr": "Optimize decoding function for long strings."
    },
    "79": {
        "passage": "You are working on a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a brute-force approach, which is not efficient for large matrices.",
        "system_prompt": "You are a software engineer tasked with optimizing matrix processing algorithms.",
        "query": "Optimize the function to find the longest increasing path in a matrix with better performance.",
        "tldr": "Optimize longest increasing path function in a matrix."
    },
    "80": {
        "passage": "Your team is developing a financial application that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation is not efficient for large arrays, leading to performance issues.",
        "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.",
        "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance.",
        "tldr": "Optimize max sum subarray with k distinct elements function."
    },
    "81": {
        "passage": "You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a large unsorted array. The current implementation uses a sorting algorithm, but it is not efficient for very large datasets. You need to optimize this function to handle large inputs more effectively.",
        "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.",
        "query": "Optimize the function to find the k-th smallest element in an unsorted array to improve its performance for large datasets.",
        "tldr": "Optimize k-th smallest element function for large datasets."
    },
    "82": {
        "passage": "Your team is developing a new feature for a social media platform that involves finding the shortest path between two users in a network. The current implementation uses a simple breadth-first search (BFS) algorithm, but it needs to be optimized to handle millions of users efficiently.",
        "system_prompt": "You are a software engineer optimizing algorithms for a social media platform.",
        "query": "Optimize the shortest path algorithm to handle large-scale user networks efficiently.",
        "tldr": "Optimize shortest path algorithm for large user networks."
    },
    "83": {
        "passage": "You are working on a financial application that requires calculating the maximum profit from stock transactions. The current implementation only handles one transaction, but the requirement has changed to allow for at most two transactions. The code needs to be extended and optimized for this new requirement.",
        "system_prompt": "You are a software engineer enhancing a financial application.",
        "query": "Extend and optimize the function to calculate the maximum profit from at most two stock transactions.",
        "tldr": "Extend and optimize max profit function for two stock transactions."
    },
    "84": {
        "passage": "Your team is developing a feature for an e-commerce platform that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, but it is not efficient for large amounts. You need to rewrite the function using dynamic programming to improve its performance.",
        "system_prompt": "You are a software engineer optimizing algorithms for an e-commerce platform.",
        "query": "Rewrite the minimum coins function using dynamic programming to improve its performance for large amounts.",
        "tldr": "Rewrite minimum coins function using dynamic programming."
    },
    "85": {
        "passage": "You are working on a text processing application that involves decoding strings. The current implementation uses a recursive approach, but it is not efficient for long strings. You need to optimize the function to handle long strings more effectively.",
        "system_prompt": "You are a software engineer optimizing text processing algorithms.",
        "query": "Optimize the decoding function to handle long strings more effectively.",
        "tldr": "Optimize decoding function for long strings."
    },
    "86": {
        "passage": "Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a depth-first search (DFS) approach, but it needs to be optimized to handle large matrices efficiently.",
        "system_prompt": "You are a software engineer optimizing algorithms for a mapping application.",
        "query": "Optimize the longest increasing path function to handle large matrices more efficiently.",
        "tldr": "Optimize longest increasing path function for large matrices."
    },
    "87": {
        "passage": "You are working on a data analysis tool that involves finding the maximum sum of a subarray with at most k distinct elements. The current implementation uses a sliding window approach, but it needs to be optimized for better performance with large inputs.",
        "system_prompt": "You are a software engineer optimizing data analysis algorithms.",
        "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large inputs.",
        "tldr": "Optimize max sum subarray with k distinct elements function for large inputs."
    },
    "88": {
        "passage": "Your team is developing a feature for a logistics application that involves finding the maximum trapped water between buildings. The current implementation uses a two-pointer approach, but it needs to be optimized to handle large datasets more efficiently.",
        "system_prompt": "You are a software engineer optimizing algorithms for a logistics application.",
        "query": "Optimize the function to find the maximum trapped water between buildings for better performance with large datasets.",
        "tldr": "Optimize max trapped water function for large datasets."
    },
    "89": {
        "passage": "You are working on a communication platform that involves returning all possible letter combinations for a string of digits. The current implementation uses a recursive approach, but it needs to be optimized to handle long strings of digits more efficiently.",
        "system_prompt": "You are a software engineer optimizing algorithms for a communication platform.",
        "query": "Optimize the function to return all possible letter combinations for a string of digits for better performance with long strings.",
        "tldr": "Optimize letter combinations function for long strings of digits."
    },
    "90": {
        "passage": "Your team is developing a feature for a financial application that involves finding unique triplets that sum to a target. The current implementation uses a brute-force approach, but it needs to be optimized to handle large datasets more efficiently.",
        "system_prompt": "You are a software engineer optimizing algorithms for a financial application.",
        "query": "Optimize the function to find unique triplets that sum to a target for better performance with large datasets.",
        "tldr": "Optimize unique triplets function for large datasets."
    },
    "91": {
        "passage": "You are given a list of integers representing the heights of buildings. The goal is to find the maximum area of water that can be trapped between the buildings. The heights are given in a list, and you need to write a function to calculate the maximum trapped water. The function should be optimized for large inputs.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function to find the maximum area of water trapped between buildings, ensuring it performs well with large datasets.",
        "tldr": "Optimize function to find maximum trapped water between buildings for large datasets."
    },
    "92": {
        "passage": "You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be optimized to handle long strings of digits efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function to return all possible letter combinations for a string of digits, ensuring it performs well with long strings.",
        "tldr": "Optimize function for letter combinations from a string of digits for long inputs."
    },
    "93": {
        "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The function should be optimized to handle large datasets efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function to find all unique triplets that sum to a target, ensuring it performs well with large datasets.",
        "tldr": "Optimize function to find unique triplets summing to a target for large datasets."
    },
    "94": {
        "passage": "You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). The function should be optimized to handle large trees efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function to check if a binary tree is a valid BST, ensuring it performs well with large trees.",
        "tldr": "Optimize function to check if a binary tree is a valid BST for large trees."
    },
    "95": {
        "passage": "You are given a list of intervals, where each interval is represented as a pair of integers [start, end]. Your task is to merge all overlapping intervals and return the result. The function should be optimized to handle large lists of intervals efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function to merge overlapping intervals, ensuring it performs well with large lists of intervals.",
        "tldr": "Optimize function to merge overlapping intervals for large lists."
    },
    "96": {
        "passage": "You are given an array of integers, and you need to find the length of the longest increasing subsequence. The function should be optimized to handle large arrays efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function to find the length of the longest increasing subsequence, ensuring it performs well with large arrays.",
        "tldr": "Optimize function to find the longest increasing subsequence for large arrays."
    },
    "97": {
        "passage": "You are given an array of integers, and you need to find the maximum product of three numbers in the array. The function should be optimized to handle large arrays efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function to find the maximum product of three numbers in an array, ensuring it performs well with large arrays.",
        "tldr": "Optimize function to find the maximum product of three numbers in a large array."
    },
    "98": {
        "passage": "You are given an array of integers, and you need to find the contiguous subarray with the largest sum. The function should be optimized to handle large arrays efficiently.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function to find the largest sum subarray, ensuring it performs well with large arrays.",
        "tldr": "Optimize function to find the largest sum subarray for large arrays."
    },
    "99": {
        "passage": "You are given an unsorted array of integers, and you need to find the first missing positive integer. The function should be optimized to run in O(n) time and use constant space.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Write and optimize a function to find the first missing positive integer, ensuring it runs in O(n) time and uses constant space.",
        "tldr": "Optimize function to find the first missing positive integer with O(n) time and constant space."
    },
    "100": {
        "passage": "You are given an unsorted array of integers, and you need to find the longest consecutive sequence of integers. The function should be optimized to run in O(n) time.",
        "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.",
        "query": "Implement and optimize a function to find the longest consecutive sequence of integers, ensuring it runs in O(n) time.",
        "tldr": "Optimize function to find the longest consecutive sequence of integers with O(n) time."
    }
}