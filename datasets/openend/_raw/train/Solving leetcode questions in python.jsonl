{"question": "Context: You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum up to the target. The solution should avoid duplicate triplets and be optimized for performance.\nQuestion: Write a Python function to find all unique triplets in an array that sum to a target, ensuring it avoids duplicates and is optimized for performance.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum up to the target. The solution should avoid duplicate triplets and be optimized for performance.", "query": "Write a Python function to find all unique triplets in an array that sum to a target, ensuring it avoids duplicates and is optimized for performance."}
{"question": "Context: You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. Your task is to return all possible letter combinations that the number could represent. The function should be efficient and handle large inputs gracefully.\nQuestion: Implement a Python function to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a string containing digits from 2-9 inclusive. Each digit maps to a set of letters as on a telephone keypad. Your task is to return all possible letter combinations that the number could represent. The function should be efficient and handle large inputs gracefully.", "query": "Implement a Python function to return all possible letter combinations for a string of digits, ensuring it handles large inputs efficiently."}
{"question": "Context: You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be optimized to handle long strings of digits efficiently.\nQuestion: Implement and optimize a function to return all possible letter combinations for a string of digits, ensuring it performs well with long strings.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a string of digits, and you need to return all possible letter combinations that the number could represent. The mapping of digits to letters is the same as on a telephone keypad. The function should be optimized to handle long strings of digits efficiently.", "query": "Implement and optimize a function to return all possible letter combinations for a string of digits, ensuring it performs well with long strings."}
{"question": "Context: You are preparing for a technical interview and need to solve a LeetCode problem that involves finding the longest palindromic substring. You have written a solution, but it seems to be inefficient.\nQuestion: Evaluate the following code for finding the longest palindromic substring and suggest ways to improve its efficiency: [insert code here].", "system_prompt": "You are a technical interview coach.", "passage": "You are preparing for a technical interview and need to solve a LeetCode problem that involves finding the longest palindromic substring. You have written a solution, but it seems to be inefficient.", "query": "Evaluate the following code for finding the longest palindromic substring and suggest ways to improve its efficiency: [insert code here]."}
{"question": "Context: You are given an array of integers, and you need to find the length of the longest increasing subsequence. The subsequence does not need to be contiguous, but the elements must be in increasing order. The solution should be optimized for both time and space complexity.\nQuestion: Implement and optimize a function in Python to find the length of the longest increasing subsequence, ensuring it runs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the length of the longest increasing subsequence. The subsequence does not need to be contiguous, but the elements must be in increasing order. The solution should be optimized for both time and space complexity.", "query": "Implement and optimize a function in Python to find the length of the longest increasing subsequence, ensuring it runs efficiently."}
{"question": "Context: You are working on a project that involves processing large datasets. One of the tasks requires you to find the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. You have written a function to solve this problem, but it is not performing efficiently for large inputs.\nQuestion: Optimize the function to find the k-th smallest element in a sorted matrix to improve its performance for large inputs.", "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.", "passage": "You are working on a project that involves processing large datasets. One of the tasks requires you to find the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. You have written a function to solve this problem, but it is not performing efficiently for large inputs.", "query": "Optimize the function to find the k-th smallest element in a sorted matrix to improve its performance for large inputs."}
{"question": "Context: You are working on a LeetCode problem where you need to merge two sorted linked lists. You have written a solution, but you are unsure if it is optimal in terms of time and space complexity.\nQuestion: Analyze the following code for merging two sorted linked lists and suggest any optimizations: [insert code here].", "system_prompt": "You are a coding mentor.", "passage": "You are working on a LeetCode problem where you need to merge two sorted linked lists. You have written a solution, but you are unsure if it is optimal in terms of time and space complexity.", "query": "Analyze the following code for merging two sorted linked lists and suggest any optimizations: [insert code here]."}
{"question": "Context: You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. The current implementation uses a brute-force approach, which is not efficient for large datasets.\nQuestion: Optimize the code to find the k-th smallest element in a sorted matrix with better time complexity.", "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.", "passage": "You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a sorted matrix. The matrix is sorted in ascending order both row-wise and column-wise. The current implementation uses a brute-force approach, which is not efficient for large datasets.", "query": "Optimize the code to find the k-th smallest element in a sorted matrix with better time complexity."}
{"question": "Context: You are solving a LeetCode problem where you need to implement a function to find the longest increasing path in a matrix. The problem statement is as follows: Given an m x n integers matrix, return the length of the longest increasing path in the matrix. You have written the following code:\n\n```python\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[-1] * n for _ in range(m)]\n        def dfs(i, j):\n            if dp[i][j] != -1:\n                return dp[i][j]\n            max_len = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_len = max(max_len, 1 + dfs(x, y))\n            dp[i][j] = max_len\n            return max_len\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n```\nHowever, this solution can be optimized for better performance.\nQuestion: Review the provided code and optimize it for better performance.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are solving a LeetCode problem where you need to implement a function to find the longest increasing path in a matrix. The problem statement is as follows: Given an m x n integers matrix, return the length of the longest increasing path in the matrix. You have written the following code:\n\n```python\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[-1] * n for _ in range(m)]\n        def dfs(i, j):\n            if dp[i][j] != -1:\n                return dp[i][j]\n            max_len = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_len = max(max_len, 1 + dfs(x, y))\n            dp[i][j] = max_len\n            return max_len\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n```\nHowever, this solution can be optimized for better performance.", "query": "Review the provided code and optimize it for better performance."}
{"question": "Context: You are working on a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a brute-force approach, which is not efficient for large matrices.\nQuestion: Optimize the function to find the longest increasing path in a matrix with better performance.", "system_prompt": "You are a software engineer tasked with optimizing matrix processing algorithms.", "passage": "You are working on a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a brute-force approach, which is not efficient for large matrices.", "query": "Optimize the function to find the longest increasing path in a matrix with better performance."}
{"question": "Context: Your team is developing a recommendation system that involves finding the top k frequent elements in a list. The current implementation uses a sorting-based approach, which is not efficient for large lists.\nQuestion: Optimize the function to find the top k frequent elements in a list with better time complexity.", "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.", "passage": "Your team is developing a recommendation system that involves finding the top k frequent elements in a list. The current implementation uses a sorting-based approach, which is not efficient for large lists.", "query": "Optimize the function to find the top k frequent elements in a list with better time complexity."}
{"question": "Context: You are working on a LeetCode problem where you need to implement a function to find the first missing positive integer in an unsorted integer array. The function should have a time complexity of O(n) and use constant extra space. The problem statement is as follows: Given an unsorted integer array nums, return the smallest missing positive integer. You have written the following code:\n\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        nums.sort()\n        missing = 1\n        for num in nums:\n            if num == missing:\n                missing += 1\n        return missing\n```\nHowever, this solution does not meet the time complexity and space requirements.\nQuestion: Review the provided code and rewrite it to meet the O(n) time complexity and constant space requirements.", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are working on a LeetCode problem where you need to implement a function to find the first missing positive integer in an unsorted integer array. The function should have a time complexity of O(n) and use constant extra space. The problem statement is as follows: Given an unsorted integer array nums, return the smallest missing positive integer. You have written the following code:\n\n```python\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        nums.sort()\n        missing = 1\n        for num in nums:\n            if num == missing:\n                missing += 1\n        return missing\n```\nHowever, this solution does not meet the time complexity and space requirements.", "query": "Review the provided code and rewrite it to meet the O(n) time complexity and constant space requirements."}
{"question": "Context: Your team is working on a financial application that involves calculating the maximum profit from stock transactions. The current function calculates the maximum profit from at most one transaction, but you need to extend it to handle at most two transactions.\nQuestion: Extend the function to calculate the maximum profit from at most two stock transactions.", "system_prompt": "You are a financial software developer enhancing stock transaction algorithms.", "passage": "Your team is working on a financial application that involves calculating the maximum profit from stock transactions. The current function calculates the maximum profit from at most one transaction, but you need to extend it to handle at most two transactions.", "query": "Extend the function to calculate the maximum profit from at most two stock transactions."}
{"question": "Context: You are developing a feature for a payment system that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a greedy approach, which does not always yield the correct result.\nQuestion: Rewrite the function to find the minimum number of coins needed to make up a given amount using dynamic programming for accurate results.", "system_prompt": "You are a software engineer improving algorithms for a payment system.", "passage": "You are developing a feature for a payment system that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a greedy approach, which does not always yield the correct result.", "query": "Rewrite the function to find the minimum number of coins needed to make up a given amount using dynamic programming for accurate results."}
{"question": "Context: You are working on a navigation system that requires finding the shortest path in an undirected graph. The current implementation uses a simple breadth-first search (BFS) algorithm, which is not optimal for large graphs with weighted edges.\nQuestion: Implement and optimize the shortest path algorithm for an undirected graph with weighted edges.", "system_prompt": "You are a software engineer tasked with optimizing graph algorithms.", "passage": "You are working on a navigation system that requires finding the shortest path in an undirected graph. The current implementation uses a simple breadth-first search (BFS) algorithm, which is not optimal for large graphs with weighted edges.", "query": "Implement and optimize the shortest path algorithm for an undirected graph with weighted edges."}
{"question": "Context: You are given an unsorted array of integers. Your task is to find the length of the longest increasing subsequence in the array. The function should be optimized for both time and space complexity.\nQuestion: Implement a Python function to find the length of the longest increasing subsequence in an array, ensuring it is optimized for time and space complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers. Your task is to find the length of the longest increasing subsequence in the array. The function should be optimized for both time and space complexity.", "query": "Implement a Python function to find the length of the longest increasing subsequence in an array, ensuring it is optimized for time and space complexity."}
{"question": "Context: You are given an unsorted array of integers. Your task is to find the first missing positive integer in linear time and using constant space. The function should be efficient and handle large arrays.\nQuestion: Write a Python function to find the first missing positive integer in linear time and using constant space, ensuring it is efficient and handles large arrays.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers. Your task is to find the first missing positive integer in linear time and using constant space. The function should be efficient and handle large arrays.", "query": "Write a Python function to find the first missing positive integer in linear time and using constant space, ensuring it is efficient and handles large arrays."}
{"question": "Context: You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The function should be optimized to handle large datasets efficiently.\nQuestion: Write and optimize a function to find all unique triplets that sum to a target, ensuring it performs well with large datasets.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers and a target sum. Your task is to find all unique triplets in the array that sum to the target. The function should be optimized to handle large datasets efficiently.", "query": "Write and optimize a function to find all unique triplets that sum to a target, ensuring it performs well with large datasets."}
{"question": "Context: You are working on a financial application that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, which is not efficient for large amounts.\nQuestion: Rewrite the minimum coins function using dynamic programming to handle large amounts efficiently.", "system_prompt": "You are a software engineer tasked with optimizing financial algorithms.", "passage": "You are working on a financial application that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, which is not efficient for large amounts.", "query": "Rewrite the minimum coins function using dynamic programming to handle large amounts efficiently."}
{"question": "Context: You are given a list of integers and you need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, given the list [-2,1,-3,4,-1,2,1,-5,4], the largest sum is 6 (i.e., [4,-1,2,1]).\nQuestion: Write a Python function to find the contiguous subarray with the largest sum in the given list.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and you need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, given the list [-2,1,-3,4,-1,2,1,-5,4], the largest sum is 6 (i.e., [4,-1,2,1]).", "query": "Write a Python function to find the contiguous subarray with the largest sum in the given list."}
{"question": "Context: You are given an array of integers representing the heights of a series of buildings. The goal is to find the maximum area of water that can be trapped between two buildings. The heights are given in a list, and the width between each pair of buildings is 1 unit. For example, given the list [1,8,6,2,5,4,8,3,7], the maximum area of water that can be trapped is 49.\nQuestion: Write a Python function to find the maximum area of water that can be trapped between two buildings in the given list of heights.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers representing the heights of a series of buildings. The goal is to find the maximum area of water that can be trapped between two buildings. The heights are given in a list, and the width between each pair of buildings is 1 unit. For example, given the list [1,8,6,2,5,4,8,3,7], the maximum area of water that can be trapped is 49.", "query": "Write a Python function to find the maximum area of water that can be trapped between two buildings in the given list of heights."}
{"question": "Context: You have been given a task to implement a function that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should be efficient and handle edge cases such as empty strings and strings with only non-alphanumeric characters.\nQuestion: Write a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Ensure the function handles edge cases efficiently.", "system_prompt": "You are a Python developer tasked with implementing a function to check for valid palindromes.", "passage": "You have been given a task to implement a function that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should be efficient and handle edge cases such as empty strings and strings with only non-alphanumeric characters.", "query": "Write a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Ensure the function handles edge cases efficiently."}
{"question": "Context: You are given a list of integers and a target sum. The task is to find all unique triplets in the list that sum up to the target sum. Each triplet should be sorted in ascending order, and the solution set should not contain duplicate triplets. For example, given the list [-1, 0, 1, 2, -1, -4] and target sum 0, the output should be [[-1, -1, 2], [-1, 0, 1]].\nQuestion: Write a Python function to find all unique triplets in the list that sum up to the target sum.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a list of integers and a target sum. The task is to find all unique triplets in the list that sum up to the target sum. Each triplet should be sorted in ascending order, and the solution set should not contain duplicate triplets. For example, given the list [-1, 0, 1, 2, -1, -4] and target sum 0, the output should be [[-1, -1, 2], [-1, 0, 1]].", "query": "Write a Python function to find all unique triplets in the list that sum up to the target sum."}
{"question": "Context: You are given an array of integers, and you need to find the maximum product of three numbers in the array. The function should be optimized to handle large arrays efficiently.\nQuestion: Write and optimize a function to find the maximum product of three numbers in an array, ensuring it performs well with large arrays.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers, and you need to find the maximum product of three numbers in the array. The function should be optimized to handle large arrays efficiently.", "query": "Write and optimize a function to find the maximum product of three numbers in an array, ensuring it performs well with large arrays."}
{"question": "Context: You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a large unsorted array. The current implementation uses a sorting algorithm, but it is not efficient for very large datasets. You need to optimize this function to handle large inputs more effectively.\nQuestion: Optimize the function to find the k-th smallest element in an unsorted array to improve its performance for large datasets.", "system_prompt": "You are a software engineer tasked with optimizing code for large datasets.", "passage": "You are working on a project that involves processing large datasets. One of the tasks requires finding the k-th smallest element in a large unsorted array. The current implementation uses a sorting algorithm, but it is not efficient for very large datasets. You need to optimize this function to handle large inputs more effectively.", "query": "Optimize the function to find the k-th smallest element in an unsorted array to improve its performance for large datasets."}
{"question": "Context: You are given an unsorted array of integers. Your task is to find the longest consecutive sequence of integers in the array. The function should be optimized for both time and space complexity.\nQuestion: Implement a Python function to find the longest consecutive sequence of integers in an array, ensuring it is optimized for time and space complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers. Your task is to find the longest consecutive sequence of integers in the array. The function should be optimized for both time and space complexity.", "query": "Implement a Python function to find the longest consecutive sequence of integers in an array, ensuring it is optimized for time and space complexity."}
{"question": "Context: Your team is developing a feature for an e-commerce platform that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, but it is not efficient for large amounts. You need to rewrite the function using dynamic programming to improve its performance.\nQuestion: Rewrite the minimum coins function using dynamic programming to improve its performance for large amounts.", "system_prompt": "You are a software engineer optimizing algorithms for an e-commerce platform.", "passage": "Your team is developing a feature for an e-commerce platform that involves finding the minimum number of coins needed to make up a given amount. The current implementation uses a recursive approach, but it is not efficient for large amounts. You need to rewrite the function using dynamic programming to improve its performance.", "query": "Rewrite the minimum coins function using dynamic programming to improve its performance for large amounts."}
{"question": "Context: You are working on a project that involves processing numerical data. One of the tasks is to implement a function that finds the maximum product of three numbers in a list. The list can be very large, and performance is a key concern.\nQuestion: Write a function to find the maximum product of three numbers in a list. Ensure the function is efficient and handles large lists.", "system_prompt": "You are a Python developer tasked with implementing a function to find the maximum product of three numbers in a list.", "passage": "You are working on a project that involves processing numerical data. One of the tasks is to implement a function that finds the maximum product of three numbers in a list. The list can be very large, and performance is a key concern.", "query": "Write a function to find the maximum product of three numbers in a list. Ensure the function is efficient and handles large lists."}
{"question": "Context: Your team is developing a feature for a logistics application that involves finding the maximum trapped water between buildings. The current implementation uses a two-pointer approach, but it needs to be optimized to handle large datasets more efficiently.\nQuestion: Optimize the function to find the maximum trapped water between buildings for better performance with large datasets.", "system_prompt": "You are a software engineer optimizing algorithms for a logistics application.", "passage": "Your team is developing a feature for a logistics application that involves finding the maximum trapped water between buildings. The current implementation uses a two-pointer approach, but it needs to be optimized to handle large datasets more efficiently.", "query": "Optimize the function to find the maximum trapped water between buildings for better performance with large datasets."}
{"question": "Context: You are given a binary tree and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key, the right subtree of a node contains only nodes with keys greater than the node's key, and both left and right subtrees must also be binary search trees.\nQuestion: Write a Python function to determine if the given binary tree is a valid binary search tree.", "system_prompt": "You are a Python developer tasked with solving a LeetCode problem.", "passage": "You are given a binary tree and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key, the right subtree of a node contains only nodes with keys greater than the node's key, and both left and right subtrees must also be binary search trees.", "query": "Write a Python function to determine if the given binary tree is a valid binary search tree."}
{"question": "Context: You are solving a LeetCode problem that involves checking if a binary tree is a valid binary search tree (BST). You have written a solution, but you are not confident about its correctness.\nQuestion: Review the following code for checking if a binary tree is a valid BST and verify its correctness: [insert code here].", "system_prompt": "You are a data structures tutor.", "passage": "You are solving a LeetCode problem that involves checking if a binary tree is a valid binary search tree (BST). You have written a solution, but you are not confident about its correctness.", "query": "Review the following code for checking if a binary tree is a valid BST and verify its correctness: [insert code here]."}
{"question": "Context: You are given an array of integers. Your task is to find the contiguous subarray within the array that has the largest sum. The function should be optimized for both time and space complexity.\nQuestion: Implement a Python function to find the contiguous subarray with the largest sum, ensuring it is optimized for time and space complexity.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an array of integers. Your task is to find the contiguous subarray within the array that has the largest sum. The function should be optimized for both time and space complexity.", "query": "Implement a Python function to find the contiguous subarray with the largest sum, ensuring it is optimized for time and space complexity."}
{"question": "Context: You are tasked with developing a feature that finds the maximum sum of a subarray with at most k distinct elements. The current implementation is not performing well for large arrays and needs optimization.\nQuestion: Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large arrays.", "system_prompt": "You are a software engineer optimizing array processing algorithms.", "passage": "You are tasked with developing a feature that finds the maximum sum of a subarray with at most k distinct elements. The current implementation is not performing well for large arrays and needs optimization.", "query": "Optimize the function to find the maximum sum of a subarray with at most k distinct elements for better performance with large arrays."}
{"question": "Context: You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.\nQuestion: Implement and optimize a function in Python to check if a binary tree is a valid BST, ensuring it runs efficiently.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a binary tree, and you need to determine if it is a valid binary search tree (BST). A valid BST is defined as a binary tree in which the left subtree of every node contains only nodes with keys less than the node's key, and the right subtree only nodes with keys greater than the node's key.", "query": "Implement and optimize a function in Python to check if a binary tree is a valid BST, ensuring it runs efficiently."}
{"question": "Context: You are working on a security feature that involves checking if a given string is a valid palindrome. The current implementation does not handle edge cases such as ignoring non-alphanumeric characters and case sensitivity.\nQuestion: Implement a function to check if a given string is a valid palindrome, considering edge cases.", "system_prompt": "You are a software engineer tasked with implementing security features.", "passage": "You are working on a security feature that involves checking if a given string is a valid palindrome. The current implementation does not handle edge cases such as ignoring non-alphanumeric characters and case sensitivity.", "query": "Implement a function to check if a given string is a valid palindrome, considering edge cases."}
{"question": "Context: You are given a list of intervals where each interval is represented as a pair of start and end times. Your task is to merge all overlapping intervals and return the list of merged intervals. The function should be efficient and handle large lists of intervals.\nQuestion: Write a Python function to merge overlapping intervals, ensuring it is efficient and handles large lists of intervals.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given a list of intervals where each interval is represented as a pair of start and end times. Your task is to merge all overlapping intervals and return the list of merged intervals. The function should be efficient and handle large lists of intervals.", "query": "Write a Python function to merge overlapping intervals, ensuring it is efficient and handles large lists of intervals."}
{"question": "Context: You are given an unsorted array of integers, and you need to find the first missing positive integer. The function should be optimized to run in O(n) time and use constant space.\nQuestion: Write and optimize a function to find the first missing positive integer, ensuring it runs in O(n) time and uses constant space.", "system_prompt": "You are a software engineer tasked with solving a LeetCode problem.", "passage": "You are given an unsorted array of integers, and you need to find the first missing positive integer. The function should be optimized to run in O(n) time and use constant space.", "query": "Write and optimize a function to find the first missing positive integer, ensuring it runs in O(n) time and uses constant space."}
{"question": "Context: You are developing a feature for a social media platform that involves finding the shortest path between two users in a network. The network is represented as an undirected graph, and you need to ensure that the solution is both correct and efficient.\nQuestion: Implement and optimize a function to find the shortest path between two users in an undirected graph.", "system_prompt": "You are a software engineer working on graph algorithms for a social media platform.", "passage": "You are developing a feature for a social media platform that involves finding the shortest path between two users in a network. The network is represented as an undirected graph, and you need to ensure that the solution is both correct and efficient.", "query": "Implement and optimize a function to find the shortest path between two users in an undirected graph."}
{"question": "Context: Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a depth-first search (DFS) approach, but it needs to be optimized to handle large matrices efficiently.\nQuestion: Optimize the longest increasing path function to handle large matrices more efficiently.", "system_prompt": "You are a software engineer optimizing algorithms for a mapping application.", "passage": "Your team is developing a feature for a mapping application that involves finding the longest increasing path in a matrix. The current implementation uses a depth-first search (DFS) approach, but it needs to be optimized to handle large matrices efficiently.", "query": "Optimize the longest increasing path function to handle large matrices more efficiently."}
{"question": "Context: You are working on a LeetCode problem where you need to implement a function to find the maximum product subarray in an array of integers. The problem statement is as follows: Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. You have written the following code:\n\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = float('-inf')\n        for i in range(len(nums)):\n            product = 1\n            for j in range(i, len(nums)):\n                product *= nums[j]\n                max_product = max(max_product, product)\n        return max_product\n```\nHowever, this solution has a time complexity of O(n^2).\nQuestion: Review the provided code and optimize it to achieve a time complexity of O(n).", "system_prompt": "You are a Python coding expert specializing in LeetCode problems.", "passage": "You are working on a LeetCode problem where you need to implement a function to find the maximum product subarray in an array of integers. The problem statement is as follows: Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. You have written the following code:\n\n```python\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = float('-inf')\n        for i in range(len(nums)):\n            product = 1\n            for j in range(i, len(nums)):\n                product *= nums[j]\n                max_product = max(max_product, product)\n        return max_product\n```\nHowever, this solution has a time complexity of O(n^2).", "query": "Review the provided code and optimize it to achieve a time complexity of O(n)."}
